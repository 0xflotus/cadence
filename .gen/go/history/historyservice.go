// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package history

import (
	"bytes"
	"code.uber.internal/devexp/minions/.gen/go/shared"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__

type HistoryService interface { //HistoryService provides API to start a new long running workflow instance, as well as query and update the history
	//of workflow instances already created.
	//

	// StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
	// 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
	// first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
	// exists with same workflowId.
	//
	//
	// Parameters:
	//  - StartRequest
	StartWorkflowExecution(startRequest *shared.StartWorkflowExecutionRequest) (r *shared.StartWorkflowExecutionResponse, err error)
	// Returns the history of specified workflow execution.  It fails with 'EntityNotExistError' if speficied workflow
	// execution in unknown to the service.
	//
	//
	// Parameters:
	//  - GetRequest
	GetWorkflowExecutionHistory(getRequest *shared.GetWorkflowExecutionHistoryRequest) (r *shared.GetWorkflowExecutionHistoryResponse, err error)
	// RecordDecisionTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
	// a PollForDecisionTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
	// if the workflow's execution history already includes a record of the event starting.
	//
	//
	// Parameters:
	//  - AddRequest
	RecordDecisionTaskStarted(addRequest *RecordDecisionTaskStartedRequest) (r *RecordDecisionTaskStartedResponse, err error)
	// RecordActivityTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
	// a PollForActivityTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
	// if the workflow's execution history already includes a record of the event starting.
	//
	//
	// Parameters:
	//  - AddRequest
	RecordActivityTaskStarted(addRequest *RecordActivityTaskStartedRequest) (r *RecordActivityTaskStartedResponse, err error)
	// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
	// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
	// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
	// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
	// for completing the DecisionTask.
	//
	//
	// Parameters:
	//  - CompleteRequest
	RespondDecisionTaskCompleted(completeRequest *shared.RespondDecisionTaskCompletedRequest) (err error)
	// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
	// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
	// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
	// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for heartbeating.
	//
	//
	// Parameters:
	//  - HeartbeatRequest
	RecordActivityTaskHeartbeat(heartbeatRequest *shared.RecordActivityTaskHeartbeatRequest) (r *shared.RecordActivityTaskHeartbeatResponse, err error)
	// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
	// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	//
	//
	// Parameters:
	//  - CompleteRequest
	RespondActivityTaskCompleted(completeRequest *shared.RespondActivityTaskCompletedRequest) (err error)
	// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	//
	//
	// Parameters:
	//  - FailRequest
	RespondActivityTaskFailed(failRequest *shared.RespondActivityTaskFailedRequest) (err error)
}

//HistoryService provides API to start a new long running workflow instance, as well as query and update the history
//of workflow instances already created.
//
type HistoryServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHistoryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HistoryServiceClient {
	return &HistoryServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHistoryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HistoryServiceClient {
	return &HistoryServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
// 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
// first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
// exists with same workflowId.
//
//
// Parameters:
//  - StartRequest
func (p *HistoryServiceClient) StartWorkflowExecution(startRequest *shared.StartWorkflowExecutionRequest) (r *shared.StartWorkflowExecutionResponse, err error) {
	if err = p.sendStartWorkflowExecution(startRequest); err != nil {
		return
	}
	return p.recvStartWorkflowExecution()
}

func (p *HistoryServiceClient) sendStartWorkflowExecution(startRequest *shared.StartWorkflowExecutionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceStartWorkflowExecutionArgs{
		StartRequest: startRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvStartWorkflowExecution() (value *shared.StartWorkflowExecutionResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "StartWorkflowExecution" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "StartWorkflowExecution failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "StartWorkflowExecution failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "StartWorkflowExecution failed: invalid message type")
		return
	}
	result := HistoryServiceStartWorkflowExecutionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.SessionAlreadyExistError != nil {
		err = result.SessionAlreadyExistError
		return
	}
	value = result.GetSuccess()
	return
}

// Returns the history of specified workflow execution.  It fails with 'EntityNotExistError' if speficied workflow
// execution in unknown to the service.
//
//
// Parameters:
//  - GetRequest
func (p *HistoryServiceClient) GetWorkflowExecutionHistory(getRequest *shared.GetWorkflowExecutionHistoryRequest) (r *shared.GetWorkflowExecutionHistoryResponse, err error) {
	if err = p.sendGetWorkflowExecutionHistory(getRequest); err != nil {
		return
	}
	return p.recvGetWorkflowExecutionHistory()
}

func (p *HistoryServiceClient) sendGetWorkflowExecutionHistory(getRequest *shared.GetWorkflowExecutionHistoryRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceGetWorkflowExecutionHistoryArgs{
		GetRequest: getRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvGetWorkflowExecutionHistory() (value *shared.GetWorkflowExecutionHistoryResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetWorkflowExecutionHistory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetWorkflowExecutionHistory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetWorkflowExecutionHistory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetWorkflowExecutionHistory failed: invalid message type")
		return
	}
	result := HistoryServiceGetWorkflowExecutionHistoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	value = result.GetSuccess()
	return
}

// RecordDecisionTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
// a PollForDecisionTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
// if the workflow's execution history already includes a record of the event starting.
//
//
// Parameters:
//  - AddRequest
func (p *HistoryServiceClient) RecordDecisionTaskStarted(addRequest *RecordDecisionTaskStartedRequest) (r *RecordDecisionTaskStartedResponse, err error) {
	if err = p.sendRecordDecisionTaskStarted(addRequest); err != nil {
		return
	}
	return p.recvRecordDecisionTaskStarted()
}

func (p *HistoryServiceClient) sendRecordDecisionTaskStarted(addRequest *RecordDecisionTaskStartedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceRecordDecisionTaskStartedArgs{
		AddRequest: addRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvRecordDecisionTaskStarted() (value *RecordDecisionTaskStartedResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RecordDecisionTaskStarted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordDecisionTaskStarted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordDecisionTaskStarted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordDecisionTaskStarted failed: invalid message type")
		return
	}
	result := HistoryServiceRecordDecisionTaskStartedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EventAlreadyStartedError != nil {
		err = result.EventAlreadyStartedError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	value = result.GetSuccess()
	return
}

// RecordActivityTaskStarted is called by the Matchingservice before it hands a decision task to the application worker in response to
// a PollForActivityTask call. It records in the history the event that the decision task has started. It will return 'EventAlreadyStartedError',
// if the workflow's execution history already includes a record of the event starting.
//
//
// Parameters:
//  - AddRequest
func (p *HistoryServiceClient) RecordActivityTaskStarted(addRequest *RecordActivityTaskStartedRequest) (r *RecordActivityTaskStartedResponse, err error) {
	if err = p.sendRecordActivityTaskStarted(addRequest); err != nil {
		return
	}
	return p.recvRecordActivityTaskStarted()
}

func (p *HistoryServiceClient) sendRecordActivityTaskStarted(addRequest *RecordActivityTaskStartedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceRecordActivityTaskStartedArgs{
		AddRequest: addRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvRecordActivityTaskStarted() (value *RecordActivityTaskStartedResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RecordActivityTaskStarted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordActivityTaskStarted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordActivityTaskStarted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordActivityTaskStarted failed: invalid message type")
		return
	}
	result := HistoryServiceRecordActivityTaskStartedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EventAlreadyStartedError != nil {
		err = result.EventAlreadyStartedError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	value = result.GetSuccess()
	return
}

// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
// for completing the DecisionTask.
//
//
// Parameters:
//  - CompleteRequest
func (p *HistoryServiceClient) RespondDecisionTaskCompleted(completeRequest *shared.RespondDecisionTaskCompletedRequest) (err error) {
	if err = p.sendRespondDecisionTaskCompleted(completeRequest); err != nil {
		return
	}
	return p.recvRespondDecisionTaskCompleted()
}

func (p *HistoryServiceClient) sendRespondDecisionTaskCompleted(completeRequest *shared.RespondDecisionTaskCompletedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceRespondDecisionTaskCompletedArgs{
		CompleteRequest: completeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvRespondDecisionTaskCompleted() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RespondDecisionTaskCompleted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondDecisionTaskCompleted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondDecisionTaskCompleted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondDecisionTaskCompleted failed: invalid message type")
		return
	}
	result := HistoryServiceRespondDecisionTaskCompletedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	return
}

// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for heartbeating.
//
//
// Parameters:
//  - HeartbeatRequest
func (p *HistoryServiceClient) RecordActivityTaskHeartbeat(heartbeatRequest *shared.RecordActivityTaskHeartbeatRequest) (r *shared.RecordActivityTaskHeartbeatResponse, err error) {
	if err = p.sendRecordActivityTaskHeartbeat(heartbeatRequest); err != nil {
		return
	}
	return p.recvRecordActivityTaskHeartbeat()
}

func (p *HistoryServiceClient) sendRecordActivityTaskHeartbeat(heartbeatRequest *shared.RecordActivityTaskHeartbeatRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceRecordActivityTaskHeartbeatArgs{
		HeartbeatRequest: heartbeatRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvRecordActivityTaskHeartbeat() (value *shared.RecordActivityTaskHeartbeatResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RecordActivityTaskHeartbeat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordActivityTaskHeartbeat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordActivityTaskHeartbeat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordActivityTaskHeartbeat failed: invalid message type")
		return
	}
	result := HistoryServiceRecordActivityTaskHeartbeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	value = result.GetSuccess()
	return
}

// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
//
//
// Parameters:
//  - CompleteRequest
func (p *HistoryServiceClient) RespondActivityTaskCompleted(completeRequest *shared.RespondActivityTaskCompletedRequest) (err error) {
	if err = p.sendRespondActivityTaskCompleted(completeRequest); err != nil {
		return
	}
	return p.recvRespondActivityTaskCompleted()
}

func (p *HistoryServiceClient) sendRespondActivityTaskCompleted(completeRequest *shared.RespondActivityTaskCompletedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceRespondActivityTaskCompletedArgs{
		CompleteRequest: completeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvRespondActivityTaskCompleted() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RespondActivityTaskCompleted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskCompleted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskCompleted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskCompleted failed: invalid message type")
		return
	}
	result := HistoryServiceRespondActivityTaskCompletedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	return
}

// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
//
//
// Parameters:
//  - FailRequest
func (p *HistoryServiceClient) RespondActivityTaskFailed(failRequest *shared.RespondActivityTaskFailedRequest) (err error) {
	if err = p.sendRespondActivityTaskFailed(failRequest); err != nil {
		return
	}
	return p.recvRespondActivityTaskFailed()
}

func (p *HistoryServiceClient) sendRespondActivityTaskFailed(failRequest *shared.RespondActivityTaskFailedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := HistoryServiceRespondActivityTaskFailedArgs{
		FailRequest: failRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *HistoryServiceClient) recvRespondActivityTaskFailed() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RespondActivityTaskFailed" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskFailed failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskFailed failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskFailed failed: invalid message type")
		return
	}
	result := HistoryServiceRespondActivityTaskFailedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	return
}

type HistoryServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HistoryService
}

func (p *HistoryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HistoryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HistoryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHistoryServiceProcessor(handler HistoryService) *HistoryServiceProcessor {

	self16 := &HistoryServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self16.processorMap["StartWorkflowExecution"] = &historyServiceProcessorStartWorkflowExecution{handler: handler}
	self16.processorMap["GetWorkflowExecutionHistory"] = &historyServiceProcessorGetWorkflowExecutionHistory{handler: handler}
	self16.processorMap["RecordDecisionTaskStarted"] = &historyServiceProcessorRecordDecisionTaskStarted{handler: handler}
	self16.processorMap["RecordActivityTaskStarted"] = &historyServiceProcessorRecordActivityTaskStarted{handler: handler}
	self16.processorMap["RespondDecisionTaskCompleted"] = &historyServiceProcessorRespondDecisionTaskCompleted{handler: handler}
	self16.processorMap["RecordActivityTaskHeartbeat"] = &historyServiceProcessorRecordActivityTaskHeartbeat{handler: handler}
	self16.processorMap["RespondActivityTaskCompleted"] = &historyServiceProcessorRespondActivityTaskCompleted{handler: handler}
	self16.processorMap["RespondActivityTaskFailed"] = &historyServiceProcessorRespondActivityTaskFailed{handler: handler}
	return self16
}

func (p *HistoryServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x17.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x17

}

type historyServiceProcessorStartWorkflowExecution struct {
	handler HistoryService
}

func (p *historyServiceProcessorStartWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceStartWorkflowExecutionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceStartWorkflowExecutionResult{}
	var retval *shared.StartWorkflowExecutionResponse
	var err2 error
	if retval, err2 = p.handler.StartWorkflowExecution(args.StartRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.WorkflowExecutionAlreadyStartedError:
			result.SessionAlreadyExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartWorkflowExecution: "+err2.Error())
			oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorGetWorkflowExecutionHistory struct {
	handler HistoryService
}

func (p *historyServiceProcessorGetWorkflowExecutionHistory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceGetWorkflowExecutionHistoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceGetWorkflowExecutionHistoryResult{}
	var retval *shared.GetWorkflowExecutionHistoryResponse
	var err2 error
	if retval, err2 = p.handler.GetWorkflowExecutionHistory(args.GetRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetWorkflowExecutionHistory: "+err2.Error())
			oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetWorkflowExecutionHistory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorRecordDecisionTaskStarted struct {
	handler HistoryService
}

func (p *historyServiceProcessorRecordDecisionTaskStarted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceRecordDecisionTaskStartedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceRecordDecisionTaskStartedResult{}
	var retval *RecordDecisionTaskStartedResponse
	var err2 error
	if retval, err2 = p.handler.RecordDecisionTaskStarted(args.AddRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *EventAlreadyStartedError:
			result.EventAlreadyStartedError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordDecisionTaskStarted: "+err2.Error())
			oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecordDecisionTaskStarted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorRecordActivityTaskStarted struct {
	handler HistoryService
}

func (p *historyServiceProcessorRecordActivityTaskStarted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceRecordActivityTaskStartedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceRecordActivityTaskStartedResult{}
	var retval *RecordActivityTaskStartedResponse
	var err2 error
	if retval, err2 = p.handler.RecordActivityTaskStarted(args.AddRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *EventAlreadyStartedError:
			result.EventAlreadyStartedError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordActivityTaskStarted: "+err2.Error())
			oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecordActivityTaskStarted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorRespondDecisionTaskCompleted struct {
	handler HistoryService
}

func (p *historyServiceProcessorRespondDecisionTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceRespondDecisionTaskCompletedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceRespondDecisionTaskCompletedResult{}
	var err2 error
	if err2 = p.handler.RespondDecisionTaskCompleted(args.CompleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondDecisionTaskCompleted: "+err2.Error())
			oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorRecordActivityTaskHeartbeat struct {
	handler HistoryService
}

func (p *historyServiceProcessorRecordActivityTaskHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceRecordActivityTaskHeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceRecordActivityTaskHeartbeatResult{}
	var retval *shared.RecordActivityTaskHeartbeatResponse
	var err2 error
	if retval, err2 = p.handler.RecordActivityTaskHeartbeat(args.HeartbeatRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordActivityTaskHeartbeat: "+err2.Error())
			oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorRespondActivityTaskCompleted struct {
	handler HistoryService
}

func (p *historyServiceProcessorRespondActivityTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceRespondActivityTaskCompletedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceRespondActivityTaskCompletedResult{}
	var err2 error
	if err2 = p.handler.RespondActivityTaskCompleted(args.CompleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskCompleted: "+err2.Error())
			oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type historyServiceProcessorRespondActivityTaskFailed struct {
	handler HistoryService
}

func (p *historyServiceProcessorRespondActivityTaskFailed) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HistoryServiceRespondActivityTaskFailedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := HistoryServiceRespondActivityTaskFailedResult{}
	var err2 error
	if err2 = p.handler.RespondActivityTaskFailed(args.FailRequest); err2 != nil {
		switch v := err2.(type) {
		case *shared.BadRequestError:
			result.BadRequestError = v
		case *shared.InternalServiceError:
			result.InternalServiceError = v
		case *shared.EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskFailed: "+err2.Error())
			oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - StartRequest
type HistoryServiceStartWorkflowExecutionArgs struct {
	StartRequest *shared.StartWorkflowExecutionRequest `thrift:"startRequest,1" db:"startRequest" json:"startRequest"`
}

func NewHistoryServiceStartWorkflowExecutionArgs() *HistoryServiceStartWorkflowExecutionArgs {
	return &HistoryServiceStartWorkflowExecutionArgs{}
}

var HistoryServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT *shared.StartWorkflowExecutionRequest

func (p *HistoryServiceStartWorkflowExecutionArgs) GetStartRequest() *shared.StartWorkflowExecutionRequest {
	if !p.IsSetStartRequest() {
		return HistoryServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT
	}
	return p.StartRequest
}
func (p *HistoryServiceStartWorkflowExecutionArgs) IsSetStartRequest() bool {
	return p.StartRequest != nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.StartRequest = &shared.StartWorkflowExecutionRequest{}
	if err := p.StartRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartRequest), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartWorkflowExecution_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startRequest: ", p), err)
	}
	if err := p.StartRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceStartWorkflowExecutionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceStartWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - SessionAlreadyExistError
type HistoryServiceStartWorkflowExecutionResult struct {
	Success                  *shared.StartWorkflowExecutionResponse       `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError          *shared.BadRequestError                      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError     *shared.InternalServiceError                 `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	SessionAlreadyExistError *shared.WorkflowExecutionAlreadyStartedError `thrift:"sessionAlreadyExistError,3" db:"sessionAlreadyExistError" json:"sessionAlreadyExistError,omitempty"`
}

func NewHistoryServiceStartWorkflowExecutionResult() *HistoryServiceStartWorkflowExecutionResult {
	return &HistoryServiceStartWorkflowExecutionResult{}
}

var HistoryServiceStartWorkflowExecutionResult_Success_DEFAULT *shared.StartWorkflowExecutionResponse

func (p *HistoryServiceStartWorkflowExecutionResult) GetSuccess() *shared.StartWorkflowExecutionResponse {
	if !p.IsSetSuccess() {
		return HistoryServiceStartWorkflowExecutionResult_Success_DEFAULT
	}
	return p.Success
}

var HistoryServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceStartWorkflowExecutionResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceStartWorkflowExecutionResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT *shared.WorkflowExecutionAlreadyStartedError

func (p *HistoryServiceStartWorkflowExecutionResult) GetSessionAlreadyExistError() *shared.WorkflowExecutionAlreadyStartedError {
	if !p.IsSetSessionAlreadyExistError() {
		return HistoryServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT
	}
	return p.SessionAlreadyExistError
}
func (p *HistoryServiceStartWorkflowExecutionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) IsSetSessionAlreadyExistError() bool {
	return p.SessionAlreadyExistError != nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &shared.StartWorkflowExecutionResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) ReadField3(iprot thrift.TProtocol) error {
	p.SessionAlreadyExistError = &shared.WorkflowExecutionAlreadyStartedError{}
	if err := p.SessionAlreadyExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionAlreadyExistError), err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartWorkflowExecution_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionAlreadyExistError() {
		if err := oprot.WriteFieldBegin("sessionAlreadyExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sessionAlreadyExistError: ", p), err)
		}
		if err := p.SessionAlreadyExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionAlreadyExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sessionAlreadyExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceStartWorkflowExecutionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceStartWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - GetRequest
type HistoryServiceGetWorkflowExecutionHistoryArgs struct {
	GetRequest *shared.GetWorkflowExecutionHistoryRequest `thrift:"getRequest,1" db:"getRequest" json:"getRequest"`
}

func NewHistoryServiceGetWorkflowExecutionHistoryArgs() *HistoryServiceGetWorkflowExecutionHistoryArgs {
	return &HistoryServiceGetWorkflowExecutionHistoryArgs{}
}

var HistoryServiceGetWorkflowExecutionHistoryArgs_GetRequest_DEFAULT *shared.GetWorkflowExecutionHistoryRequest

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) GetGetRequest() *shared.GetWorkflowExecutionHistoryRequest {
	if !p.IsSetGetRequest() {
		return HistoryServiceGetWorkflowExecutionHistoryArgs_GetRequest_DEFAULT
	}
	return p.GetRequest
}
func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) IsSetGetRequest() bool {
	return p.GetRequest != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.GetRequest = &shared.GetWorkflowExecutionHistoryRequest{}
	if err := p.GetRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.GetRequest), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWorkflowExecutionHistory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("getRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:getRequest: ", p), err)
	}
	if err := p.GetRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.GetRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:getRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceGetWorkflowExecutionHistoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type HistoryServiceGetWorkflowExecutionHistoryResult struct {
	Success              *shared.GetWorkflowExecutionHistoryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError      *shared.BadRequestError                     `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *shared.InternalServiceError                `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *shared.EntityNotExistsError                `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceGetWorkflowExecutionHistoryResult() *HistoryServiceGetWorkflowExecutionHistoryResult {
	return &HistoryServiceGetWorkflowExecutionHistoryResult{}
}

var HistoryServiceGetWorkflowExecutionHistoryResult_Success_DEFAULT *shared.GetWorkflowExecutionHistoryResponse

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetSuccess() *shared.GetWorkflowExecutionHistoryResponse {
	if !p.IsSetSuccess() {
		return HistoryServiceGetWorkflowExecutionHistoryResult_Success_DEFAULT
	}
	return p.Success
}

var HistoryServiceGetWorkflowExecutionHistoryResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceGetWorkflowExecutionHistoryResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceGetWorkflowExecutionHistoryResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceGetWorkflowExecutionHistoryResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceGetWorkflowExecutionHistoryResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceGetWorkflowExecutionHistoryResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &shared.GetWorkflowExecutionHistoryResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetWorkflowExecutionHistory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceGetWorkflowExecutionHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceGetWorkflowExecutionHistoryResult(%+v)", *p)
}

// Attributes:
//  - AddRequest
type HistoryServiceRecordDecisionTaskStartedArgs struct {
	AddRequest *RecordDecisionTaskStartedRequest `thrift:"addRequest,1" db:"addRequest" json:"addRequest"`
}

func NewHistoryServiceRecordDecisionTaskStartedArgs() *HistoryServiceRecordDecisionTaskStartedArgs {
	return &HistoryServiceRecordDecisionTaskStartedArgs{}
}

var HistoryServiceRecordDecisionTaskStartedArgs_AddRequest_DEFAULT *RecordDecisionTaskStartedRequest

func (p *HistoryServiceRecordDecisionTaskStartedArgs) GetAddRequest() *RecordDecisionTaskStartedRequest {
	if !p.IsSetAddRequest() {
		return HistoryServiceRecordDecisionTaskStartedArgs_AddRequest_DEFAULT
	}
	return p.AddRequest
}
func (p *HistoryServiceRecordDecisionTaskStartedArgs) IsSetAddRequest() bool {
	return p.AddRequest != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.AddRequest = &RecordDecisionTaskStartedRequest{}
	if err := p.AddRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddRequest), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordDecisionTaskStarted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addRequest: ", p), err)
	}
	if err := p.AddRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceRecordDecisionTaskStartedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRecordDecisionTaskStartedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EventAlreadyStartedError
//  - EntityNotExistError
type HistoryServiceRecordDecisionTaskStartedResult struct {
	Success                  *RecordDecisionTaskStartedResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError          *shared.BadRequestError            `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError     *shared.InternalServiceError       `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EventAlreadyStartedError *EventAlreadyStartedError          `thrift:"eventAlreadyStartedError,3" db:"eventAlreadyStartedError" json:"eventAlreadyStartedError,omitempty"`
	EntityNotExistError      *shared.EntityNotExistsError       `thrift:"entityNotExistError,4" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceRecordDecisionTaskStartedResult() *HistoryServiceRecordDecisionTaskStartedResult {
	return &HistoryServiceRecordDecisionTaskStartedResult{}
}

var HistoryServiceRecordDecisionTaskStartedResult_Success_DEFAULT *RecordDecisionTaskStartedResponse

func (p *HistoryServiceRecordDecisionTaskStartedResult) GetSuccess() *RecordDecisionTaskStartedResponse {
	if !p.IsSetSuccess() {
		return HistoryServiceRecordDecisionTaskStartedResult_Success_DEFAULT
	}
	return p.Success
}

var HistoryServiceRecordDecisionTaskStartedResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceRecordDecisionTaskStartedResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceRecordDecisionTaskStartedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceRecordDecisionTaskStartedResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceRecordDecisionTaskStartedResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceRecordDecisionTaskStartedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceRecordDecisionTaskStartedResult_EventAlreadyStartedError_DEFAULT *EventAlreadyStartedError

func (p *HistoryServiceRecordDecisionTaskStartedResult) GetEventAlreadyStartedError() *EventAlreadyStartedError {
	if !p.IsSetEventAlreadyStartedError() {
		return HistoryServiceRecordDecisionTaskStartedResult_EventAlreadyStartedError_DEFAULT
	}
	return p.EventAlreadyStartedError
}

var HistoryServiceRecordDecisionTaskStartedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceRecordDecisionTaskStartedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceRecordDecisionTaskStartedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetEventAlreadyStartedError() bool {
	return p.EventAlreadyStartedError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RecordDecisionTaskStartedResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EventAlreadyStartedError = &EventAlreadyStartedError{}
	if err := p.EventAlreadyStartedError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventAlreadyStartedError), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) ReadField4(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordDecisionTaskStarted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventAlreadyStartedError() {
		if err := oprot.WriteFieldBegin("eventAlreadyStartedError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventAlreadyStartedError: ", p), err)
		}
		if err := p.EventAlreadyStartedError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventAlreadyStartedError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventAlreadyStartedError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordDecisionTaskStartedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRecordDecisionTaskStartedResult(%+v)", *p)
}

// Attributes:
//  - AddRequest
type HistoryServiceRecordActivityTaskStartedArgs struct {
	AddRequest *RecordActivityTaskStartedRequest `thrift:"addRequest,1" db:"addRequest" json:"addRequest"`
}

func NewHistoryServiceRecordActivityTaskStartedArgs() *HistoryServiceRecordActivityTaskStartedArgs {
	return &HistoryServiceRecordActivityTaskStartedArgs{}
}

var HistoryServiceRecordActivityTaskStartedArgs_AddRequest_DEFAULT *RecordActivityTaskStartedRequest

func (p *HistoryServiceRecordActivityTaskStartedArgs) GetAddRequest() *RecordActivityTaskStartedRequest {
	if !p.IsSetAddRequest() {
		return HistoryServiceRecordActivityTaskStartedArgs_AddRequest_DEFAULT
	}
	return p.AddRequest
}
func (p *HistoryServiceRecordActivityTaskStartedArgs) IsSetAddRequest() bool {
	return p.AddRequest != nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.AddRequest = &RecordActivityTaskStartedRequest{}
	if err := p.AddRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AddRequest), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskStarted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("addRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:addRequest: ", p), err)
	}
	if err := p.AddRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AddRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:addRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskStartedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRecordActivityTaskStartedArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EventAlreadyStartedError
//  - EntityNotExistError
type HistoryServiceRecordActivityTaskStartedResult struct {
	Success                  *RecordActivityTaskStartedResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError          *shared.BadRequestError            `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError     *shared.InternalServiceError       `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EventAlreadyStartedError *EventAlreadyStartedError          `thrift:"eventAlreadyStartedError,3" db:"eventAlreadyStartedError" json:"eventAlreadyStartedError,omitempty"`
	EntityNotExistError      *shared.EntityNotExistsError       `thrift:"entityNotExistError,4" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceRecordActivityTaskStartedResult() *HistoryServiceRecordActivityTaskStartedResult {
	return &HistoryServiceRecordActivityTaskStartedResult{}
}

var HistoryServiceRecordActivityTaskStartedResult_Success_DEFAULT *RecordActivityTaskStartedResponse

func (p *HistoryServiceRecordActivityTaskStartedResult) GetSuccess() *RecordActivityTaskStartedResponse {
	if !p.IsSetSuccess() {
		return HistoryServiceRecordActivityTaskStartedResult_Success_DEFAULT
	}
	return p.Success
}

var HistoryServiceRecordActivityTaskStartedResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceRecordActivityTaskStartedResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceRecordActivityTaskStartedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceRecordActivityTaskStartedResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceRecordActivityTaskStartedResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceRecordActivityTaskStartedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceRecordActivityTaskStartedResult_EventAlreadyStartedError_DEFAULT *EventAlreadyStartedError

func (p *HistoryServiceRecordActivityTaskStartedResult) GetEventAlreadyStartedError() *EventAlreadyStartedError {
	if !p.IsSetEventAlreadyStartedError() {
		return HistoryServiceRecordActivityTaskStartedResult_EventAlreadyStartedError_DEFAULT
	}
	return p.EventAlreadyStartedError
}

var HistoryServiceRecordActivityTaskStartedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceRecordActivityTaskStartedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceRecordActivityTaskStartedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetEventAlreadyStartedError() bool {
	return p.EventAlreadyStartedError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RecordActivityTaskStartedResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EventAlreadyStartedError = &EventAlreadyStartedError{}
	if err := p.EventAlreadyStartedError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventAlreadyStartedError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) ReadField4(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskStarted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEventAlreadyStartedError() {
		if err := oprot.WriteFieldBegin("eventAlreadyStartedError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:eventAlreadyStartedError: ", p), err)
		}
		if err := p.EventAlreadyStartedError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventAlreadyStartedError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:eventAlreadyStartedError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskStartedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRecordActivityTaskStartedResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type HistoryServiceRespondDecisionTaskCompletedArgs struct {
	CompleteRequest *shared.RespondDecisionTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewHistoryServiceRespondDecisionTaskCompletedArgs() *HistoryServiceRespondDecisionTaskCompletedArgs {
	return &HistoryServiceRespondDecisionTaskCompletedArgs{}
}

var HistoryServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT *shared.RespondDecisionTaskCompletedRequest

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) GetCompleteRequest() *shared.RespondDecisionTaskCompletedRequest {
	if !p.IsSetCompleteRequest() {
		return HistoryServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT
	}
	return p.CompleteRequest
}
func (p *HistoryServiceRespondDecisionTaskCompletedArgs) IsSetCompleteRequest() bool {
	return p.CompleteRequest != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.CompleteRequest = &shared.RespondDecisionTaskCompletedRequest{}
	if err := p.CompleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err)
	}
	if err := p.CompleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRespondDecisionTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type HistoryServiceRespondDecisionTaskCompletedResult struct {
	BadRequestError      *shared.BadRequestError      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceRespondDecisionTaskCompletedResult() *HistoryServiceRespondDecisionTaskCompletedResult {
	return &HistoryServiceRespondDecisionTaskCompletedResult{}
}

var HistoryServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceRespondDecisionTaskCompletedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceRespondDecisionTaskCompletedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceRespondDecisionTaskCompletedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondDecisionTaskCompletedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRespondDecisionTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - HeartbeatRequest
type HistoryServiceRecordActivityTaskHeartbeatArgs struct {
	HeartbeatRequest *shared.RecordActivityTaskHeartbeatRequest `thrift:"heartbeatRequest,1" db:"heartbeatRequest" json:"heartbeatRequest"`
}

func NewHistoryServiceRecordActivityTaskHeartbeatArgs() *HistoryServiceRecordActivityTaskHeartbeatArgs {
	return &HistoryServiceRecordActivityTaskHeartbeatArgs{}
}

var HistoryServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT *shared.RecordActivityTaskHeartbeatRequest

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) GetHeartbeatRequest() *shared.RecordActivityTaskHeartbeatRequest {
	if !p.IsSetHeartbeatRequest() {
		return HistoryServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT
	}
	return p.HeartbeatRequest
}
func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) IsSetHeartbeatRequest() bool {
	return p.HeartbeatRequest != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.HeartbeatRequest = &shared.RecordActivityTaskHeartbeatRequest{}
	if err := p.HeartbeatRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HeartbeatRequest), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("heartbeatRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heartbeatRequest: ", p), err)
	}
	if err := p.HeartbeatRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HeartbeatRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heartbeatRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRecordActivityTaskHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type HistoryServiceRecordActivityTaskHeartbeatResult struct {
	Success              *shared.RecordActivityTaskHeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError      *shared.BadRequestError                     `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *shared.InternalServiceError                `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *shared.EntityNotExistsError                `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceRecordActivityTaskHeartbeatResult() *HistoryServiceRecordActivityTaskHeartbeatResult {
	return &HistoryServiceRecordActivityTaskHeartbeatResult{}
}

var HistoryServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT *shared.RecordActivityTaskHeartbeatResponse

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetSuccess() *shared.RecordActivityTaskHeartbeatResponse {
	if !p.IsSetSuccess() {
		return HistoryServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT
	}
	return p.Success
}

var HistoryServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &shared.RecordActivityTaskHeartbeatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRecordActivityTaskHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRecordActivityTaskHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type HistoryServiceRespondActivityTaskCompletedArgs struct {
	CompleteRequest *shared.RespondActivityTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewHistoryServiceRespondActivityTaskCompletedArgs() *HistoryServiceRespondActivityTaskCompletedArgs {
	return &HistoryServiceRespondActivityTaskCompletedArgs{}
}

var HistoryServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT *shared.RespondActivityTaskCompletedRequest

func (p *HistoryServiceRespondActivityTaskCompletedArgs) GetCompleteRequest() *shared.RespondActivityTaskCompletedRequest {
	if !p.IsSetCompleteRequest() {
		return HistoryServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT
	}
	return p.CompleteRequest
}
func (p *HistoryServiceRespondActivityTaskCompletedArgs) IsSetCompleteRequest() bool {
	return p.CompleteRequest != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.CompleteRequest = &shared.RespondActivityTaskCompletedRequest{}
	if err := p.CompleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err)
	}
	if err := p.CompleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskCompletedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRespondActivityTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type HistoryServiceRespondActivityTaskCompletedResult struct {
	BadRequestError      *shared.BadRequestError      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceRespondActivityTaskCompletedResult() *HistoryServiceRespondActivityTaskCompletedResult {
	return &HistoryServiceRespondActivityTaskCompletedResult{}
}

var HistoryServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceRespondActivityTaskCompletedResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceRespondActivityTaskCompletedResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceRespondActivityTaskCompletedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskCompletedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRespondActivityTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - FailRequest
type HistoryServiceRespondActivityTaskFailedArgs struct {
	FailRequest *shared.RespondActivityTaskFailedRequest `thrift:"failRequest,1" db:"failRequest" json:"failRequest"`
}

func NewHistoryServiceRespondActivityTaskFailedArgs() *HistoryServiceRespondActivityTaskFailedArgs {
	return &HistoryServiceRespondActivityTaskFailedArgs{}
}

var HistoryServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT *shared.RespondActivityTaskFailedRequest

func (p *HistoryServiceRespondActivityTaskFailedArgs) GetFailRequest() *shared.RespondActivityTaskFailedRequest {
	if !p.IsSetFailRequest() {
		return HistoryServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT
	}
	return p.FailRequest
}
func (p *HistoryServiceRespondActivityTaskFailedArgs) IsSetFailRequest() bool {
	return p.FailRequest != nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.FailRequest = &shared.RespondActivityTaskFailedRequest{}
	if err := p.FailRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailRequest), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskFailed_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failRequest: ", p), err)
	}
	if err := p.FailRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failRequest: ", p), err)
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskFailedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRespondActivityTaskFailedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type HistoryServiceRespondActivityTaskFailedResult struct {
	BadRequestError      *shared.BadRequestError      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *shared.InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *shared.EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewHistoryServiceRespondActivityTaskFailedResult() *HistoryServiceRespondActivityTaskFailedResult {
	return &HistoryServiceRespondActivityTaskFailedResult{}
}

var HistoryServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT *shared.BadRequestError

func (p *HistoryServiceRespondActivityTaskFailedResult) GetBadRequestError() *shared.BadRequestError {
	if !p.IsSetBadRequestError() {
		return HistoryServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var HistoryServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT *shared.InternalServiceError

func (p *HistoryServiceRespondActivityTaskFailedResult) GetInternalServiceError() *shared.InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return HistoryServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var HistoryServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT *shared.EntityNotExistsError

func (p *HistoryServiceRespondActivityTaskFailedResult) GetEntityNotExistError() *shared.EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return HistoryServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &shared.BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &shared.InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &shared.EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskFailed_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *HistoryServiceRespondActivityTaskFailedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryServiceRespondActivityTaskFailedResult(%+v)", *p)
}
