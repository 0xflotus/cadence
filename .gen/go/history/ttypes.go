// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package history

import (
	"bytes"
	"code.uber.internal/devexp/minions/.gen/go/shared"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - Message
type EventAlreadyStartedError struct {
	Message string `thrift:"message,1,required" db:"message" json:"message"`
}

func NewEventAlreadyStartedError() *EventAlreadyStartedError {
	return &EventAlreadyStartedError{}
}

func (p *EventAlreadyStartedError) GetMessage() string {
	return p.Message
}
func (p *EventAlreadyStartedError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *EventAlreadyStartedError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *EventAlreadyStartedError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("EventAlreadyStartedError"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *EventAlreadyStartedError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
	}
	return err
}

func (p *EventAlreadyStartedError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EventAlreadyStartedError(%+v)", *p)
}

func (p *EventAlreadyStartedError) Error() string {
	return p.String()
}

// Attributes:
//  - WorkflowExecution
//  - ScheduleId
//  - TaskId
//  - RequestId
//  - PollRequest
type RecordActivityTaskStartedRequest struct {
	// unused fields # 1 to 9
	WorkflowExecution *shared.WorkflowExecution `thrift:"workflowExecution,10" db:"workflowExecution" json:"workflowExecution,omitempty"`
	// unused fields # 11 to 19
	ScheduleId *int64 `thrift:"scheduleId,20" db:"scheduleId" json:"scheduleId,omitempty"`
	// unused fields # 21 to 29
	TaskId *int64 `thrift:"taskId,30" db:"taskId" json:"taskId,omitempty"`
	// unused fields # 31 to 34
	RequestId *string `thrift:"requestId,35" db:"requestId" json:"requestId,omitempty"`
	// unused fields # 36 to 39
	PollRequest *shared.PollForActivityTaskRequest `thrift:"pollRequest,40" db:"pollRequest" json:"pollRequest,omitempty"`
}

func NewRecordActivityTaskStartedRequest() *RecordActivityTaskStartedRequest {
	return &RecordActivityTaskStartedRequest{}
}

var RecordActivityTaskStartedRequest_WorkflowExecution_DEFAULT *shared.WorkflowExecution

func (p *RecordActivityTaskStartedRequest) GetWorkflowExecution() *shared.WorkflowExecution {
	if !p.IsSetWorkflowExecution() {
		return RecordActivityTaskStartedRequest_WorkflowExecution_DEFAULT
	}
	return p.WorkflowExecution
}

var RecordActivityTaskStartedRequest_ScheduleId_DEFAULT int64

func (p *RecordActivityTaskStartedRequest) GetScheduleId() int64 {
	if !p.IsSetScheduleId() {
		return RecordActivityTaskStartedRequest_ScheduleId_DEFAULT
	}
	return *p.ScheduleId
}

var RecordActivityTaskStartedRequest_TaskId_DEFAULT int64

func (p *RecordActivityTaskStartedRequest) GetTaskId() int64 {
	if !p.IsSetTaskId() {
		return RecordActivityTaskStartedRequest_TaskId_DEFAULT
	}
	return *p.TaskId
}

var RecordActivityTaskStartedRequest_RequestId_DEFAULT string

func (p *RecordActivityTaskStartedRequest) GetRequestId() string {
	if !p.IsSetRequestId() {
		return RecordActivityTaskStartedRequest_RequestId_DEFAULT
	}
	return *p.RequestId
}

var RecordActivityTaskStartedRequest_PollRequest_DEFAULT *shared.PollForActivityTaskRequest

func (p *RecordActivityTaskStartedRequest) GetPollRequest() *shared.PollForActivityTaskRequest {
	if !p.IsSetPollRequest() {
		return RecordActivityTaskStartedRequest_PollRequest_DEFAULT
	}
	return p.PollRequest
}
func (p *RecordActivityTaskStartedRequest) IsSetWorkflowExecution() bool {
	return p.WorkflowExecution != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetScheduleId() bool {
	return p.ScheduleId != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *RecordActivityTaskStartedRequest) IsSetPollRequest() bool {
	return p.PollRequest != nil
}

func (p *RecordActivityTaskStartedRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.ReadField35(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.ReadField40(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) ReadField10(iprot thrift.TProtocol) error {
	p.WorkflowExecution = &shared.WorkflowExecution{}
	if err := p.WorkflowExecution.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.ScheduleId = &v
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.TaskId = &v
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.RequestId = &v
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) ReadField40(iprot thrift.TProtocol) error {
	p.PollRequest = &shared.PollForActivityTaskRequest{}
	if err := p.PollRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskStartedRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecordActivityTaskStartedRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkflowExecution() {
		if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowExecution: ", p), err)
		}
		if err := p.WorkflowExecution.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowExecution: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduleId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scheduleId (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduleId: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskId() {
		if err := oprot.WriteFieldBegin("taskId", thrift.I64, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:taskId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TaskId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taskId (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:taskId: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedRequest) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 35); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:requestId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RequestId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestId (35) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 35:requestId: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedRequest) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetPollRequest() {
		if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:pollRequest: ", p), err)
		}
		if err := p.PollRequest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:pollRequest: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordActivityTaskStartedRequest(%+v)", *p)
}

// Attributes:
//  - StartedEvent
//  - ScheduledEvent
type RecordActivityTaskStartedResponse struct {
	// unused fields # 1 to 9
	StartedEvent *shared.HistoryEvent `thrift:"startedEvent,10" db:"startedEvent" json:"startedEvent,omitempty"`
	// unused fields # 11 to 19
	ScheduledEvent *shared.HistoryEvent `thrift:"scheduledEvent,20" db:"scheduledEvent" json:"scheduledEvent,omitempty"`
}

func NewRecordActivityTaskStartedResponse() *RecordActivityTaskStartedResponse {
	return &RecordActivityTaskStartedResponse{}
}

var RecordActivityTaskStartedResponse_StartedEvent_DEFAULT *shared.HistoryEvent

func (p *RecordActivityTaskStartedResponse) GetStartedEvent() *shared.HistoryEvent {
	if !p.IsSetStartedEvent() {
		return RecordActivityTaskStartedResponse_StartedEvent_DEFAULT
	}
	return p.StartedEvent
}

var RecordActivityTaskStartedResponse_ScheduledEvent_DEFAULT *shared.HistoryEvent

func (p *RecordActivityTaskStartedResponse) GetScheduledEvent() *shared.HistoryEvent {
	if !p.IsSetScheduledEvent() {
		return RecordActivityTaskStartedResponse_ScheduledEvent_DEFAULT
	}
	return p.ScheduledEvent
}
func (p *RecordActivityTaskStartedResponse) IsSetStartedEvent() bool {
	return p.StartedEvent != nil
}

func (p *RecordActivityTaskStartedResponse) IsSetScheduledEvent() bool {
	return p.ScheduledEvent != nil
}

func (p *RecordActivityTaskStartedResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecordActivityTaskStartedResponse) ReadField10(iprot thrift.TProtocol) error {
	p.StartedEvent = &shared.HistoryEvent{}
	if err := p.StartedEvent.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartedEvent), err)
	}
	return nil
}

func (p *RecordActivityTaskStartedResponse) ReadField20(iprot thrift.TProtocol) error {
	p.ScheduledEvent = &shared.HistoryEvent{}
	if err := p.ScheduledEvent.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ScheduledEvent), err)
	}
	return nil
}

func (p *RecordActivityTaskStartedResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskStartedResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecordActivityTaskStartedResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartedEvent() {
		if err := oprot.WriteFieldBegin("startedEvent", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:startedEvent: ", p), err)
		}
		if err := p.StartedEvent.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartedEvent), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:startedEvent: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduledEvent() {
		if err := oprot.WriteFieldBegin("scheduledEvent", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduledEvent: ", p), err)
		}
		if err := p.ScheduledEvent.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ScheduledEvent), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduledEvent: ", p), err)
		}
	}
	return err
}

func (p *RecordActivityTaskStartedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordActivityTaskStartedResponse(%+v)", *p)
}

// Attributes:
//  - WorkflowExecution
//  - ScheduleId
//  - TaskId
//  - RequestId
//  - PollRequest
type RecordDecisionTaskStartedRequest struct {
	// unused fields # 1 to 9
	WorkflowExecution *shared.WorkflowExecution `thrift:"workflowExecution,10" db:"workflowExecution" json:"workflowExecution,omitempty"`
	// unused fields # 11 to 19
	ScheduleId *int64 `thrift:"scheduleId,20" db:"scheduleId" json:"scheduleId,omitempty"`
	// unused fields # 21 to 29
	TaskId *int64 `thrift:"taskId,30" db:"taskId" json:"taskId,omitempty"`
	// unused fields # 31 to 34
	RequestId *string `thrift:"requestId,35" db:"requestId" json:"requestId,omitempty"`
	// unused fields # 36 to 39
	PollRequest *shared.PollForDecisionTaskRequest `thrift:"pollRequest,40" db:"pollRequest" json:"pollRequest,omitempty"`
}

func NewRecordDecisionTaskStartedRequest() *RecordDecisionTaskStartedRequest {
	return &RecordDecisionTaskStartedRequest{}
}

var RecordDecisionTaskStartedRequest_WorkflowExecution_DEFAULT *shared.WorkflowExecution

func (p *RecordDecisionTaskStartedRequest) GetWorkflowExecution() *shared.WorkflowExecution {
	if !p.IsSetWorkflowExecution() {
		return RecordDecisionTaskStartedRequest_WorkflowExecution_DEFAULT
	}
	return p.WorkflowExecution
}

var RecordDecisionTaskStartedRequest_ScheduleId_DEFAULT int64

func (p *RecordDecisionTaskStartedRequest) GetScheduleId() int64 {
	if !p.IsSetScheduleId() {
		return RecordDecisionTaskStartedRequest_ScheduleId_DEFAULT
	}
	return *p.ScheduleId
}

var RecordDecisionTaskStartedRequest_TaskId_DEFAULT int64

func (p *RecordDecisionTaskStartedRequest) GetTaskId() int64 {
	if !p.IsSetTaskId() {
		return RecordDecisionTaskStartedRequest_TaskId_DEFAULT
	}
	return *p.TaskId
}

var RecordDecisionTaskStartedRequest_RequestId_DEFAULT string

func (p *RecordDecisionTaskStartedRequest) GetRequestId() string {
	if !p.IsSetRequestId() {
		return RecordDecisionTaskStartedRequest_RequestId_DEFAULT
	}
	return *p.RequestId
}

var RecordDecisionTaskStartedRequest_PollRequest_DEFAULT *shared.PollForDecisionTaskRequest

func (p *RecordDecisionTaskStartedRequest) GetPollRequest() *shared.PollForDecisionTaskRequest {
	if !p.IsSetPollRequest() {
		return RecordDecisionTaskStartedRequest_PollRequest_DEFAULT
	}
	return p.PollRequest
}
func (p *RecordDecisionTaskStartedRequest) IsSetWorkflowExecution() bool {
	return p.WorkflowExecution != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetScheduleId() bool {
	return p.ScheduleId != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetTaskId() bool {
	return p.TaskId != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetRequestId() bool {
	return p.RequestId != nil
}

func (p *RecordDecisionTaskStartedRequest) IsSetPollRequest() bool {
	return p.PollRequest != nil
}

func (p *RecordDecisionTaskStartedRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 35:
			if err := p.ReadField35(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.ReadField40(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) ReadField10(iprot thrift.TProtocol) error {
	p.WorkflowExecution = &shared.WorkflowExecution{}
	if err := p.WorkflowExecution.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowExecution), err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.ScheduleId = &v
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.TaskId = &v
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) ReadField35(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 35: ", err)
	} else {
		p.RequestId = &v
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) ReadField40(iprot thrift.TProtocol) error {
	p.PollRequest = &shared.PollForDecisionTaskRequest{}
	if err := p.PollRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordDecisionTaskStartedRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField35(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkflowExecution() {
		if err := oprot.WriteFieldBegin("workflowExecution", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowExecution: ", p), err)
		}
		if err := p.WorkflowExecution.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowExecution), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowExecution: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:scheduleId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scheduleId (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:scheduleId: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskId() {
		if err := oprot.WriteFieldBegin("taskId", thrift.I64, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:taskId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TaskId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.taskId (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:taskId: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedRequest) writeField35(oprot thrift.TProtocol) (err error) {
	if p.IsSetRequestId() {
		if err := oprot.WriteFieldBegin("requestId", thrift.STRING, 35); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:requestId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RequestId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.requestId (35) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 35:requestId: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedRequest) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetPollRequest() {
		if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:pollRequest: ", p), err)
		}
		if err := p.PollRequest.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:pollRequest: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordDecisionTaskStartedRequest(%+v)", *p)
}

// Attributes:
//  - WorkflowType
//  - PreviousStartedEventId
//  - StartedEventId
//  - History
type RecordDecisionTaskStartedResponse struct {
	// unused fields # 1 to 9
	WorkflowType *shared.WorkflowType `thrift:"workflowType,10" db:"workflowType" json:"workflowType,omitempty"`
	// unused fields # 11 to 19
	PreviousStartedEventId *int64 `thrift:"previousStartedEventId,20" db:"previousStartedEventId" json:"previousStartedEventId,omitempty"`
	// unused fields # 21 to 29
	StartedEventId *int64 `thrift:"startedEventId,30" db:"startedEventId" json:"startedEventId,omitempty"`
	// unused fields # 31 to 39
	History *shared.History `thrift:"history,40" db:"history" json:"history,omitempty"`
}

func NewRecordDecisionTaskStartedResponse() *RecordDecisionTaskStartedResponse {
	return &RecordDecisionTaskStartedResponse{}
}

var RecordDecisionTaskStartedResponse_WorkflowType_DEFAULT *shared.WorkflowType

func (p *RecordDecisionTaskStartedResponse) GetWorkflowType() *shared.WorkflowType {
	if !p.IsSetWorkflowType() {
		return RecordDecisionTaskStartedResponse_WorkflowType_DEFAULT
	}
	return p.WorkflowType
}

var RecordDecisionTaskStartedResponse_PreviousStartedEventId_DEFAULT int64

func (p *RecordDecisionTaskStartedResponse) GetPreviousStartedEventId() int64 {
	if !p.IsSetPreviousStartedEventId() {
		return RecordDecisionTaskStartedResponse_PreviousStartedEventId_DEFAULT
	}
	return *p.PreviousStartedEventId
}

var RecordDecisionTaskStartedResponse_StartedEventId_DEFAULT int64

func (p *RecordDecisionTaskStartedResponse) GetStartedEventId() int64 {
	if !p.IsSetStartedEventId() {
		return RecordDecisionTaskStartedResponse_StartedEventId_DEFAULT
	}
	return *p.StartedEventId
}

var RecordDecisionTaskStartedResponse_History_DEFAULT *shared.History

func (p *RecordDecisionTaskStartedResponse) GetHistory() *shared.History {
	if !p.IsSetHistory() {
		return RecordDecisionTaskStartedResponse_History_DEFAULT
	}
	return p.History
}
func (p *RecordDecisionTaskStartedResponse) IsSetWorkflowType() bool {
	return p.WorkflowType != nil
}

func (p *RecordDecisionTaskStartedResponse) IsSetPreviousStartedEventId() bool {
	return p.PreviousStartedEventId != nil
}

func (p *RecordDecisionTaskStartedResponse) IsSetStartedEventId() bool {
	return p.StartedEventId != nil
}

func (p *RecordDecisionTaskStartedResponse) IsSetHistory() bool {
	return p.History != nil
}

func (p *RecordDecisionTaskStartedResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		case 40:
			if err := p.ReadField40(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedResponse) ReadField10(iprot thrift.TProtocol) error {
	p.WorkflowType = &shared.WorkflowType{}
	if err := p.WorkflowType.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WorkflowType), err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedResponse) ReadField20(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 20: ", err)
	} else {
		p.PreviousStartedEventId = &v
	}
	return nil
}

func (p *RecordDecisionTaskStartedResponse) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.StartedEventId = &v
	}
	return nil
}

func (p *RecordDecisionTaskStartedResponse) ReadField40(iprot thrift.TProtocol) error {
	p.History = &shared.History{}
	if err := p.History.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.History), err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordDecisionTaskStartedResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := p.writeField40(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RecordDecisionTaskStartedResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkflowType() {
		if err := oprot.WriteFieldBegin("workflowType", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:workflowType: ", p), err)
		}
		if err := p.WorkflowType.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WorkflowType), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:workflowType: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPreviousStartedEventId() {
		if err := oprot.WriteFieldBegin("previousStartedEventId", thrift.I64, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:previousStartedEventId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.PreviousStartedEventId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.previousStartedEventId (20) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:previousStartedEventId: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedResponse) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartedEventId() {
		if err := oprot.WriteFieldBegin("startedEventId", thrift.I64, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:startedEventId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.StartedEventId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.startedEventId (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:startedEventId: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedResponse) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetHistory() {
		if err := oprot.WriteFieldBegin("history", thrift.STRUCT, 40); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:history: ", p), err)
		}
		if err := p.History.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.History), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 40:history: ", p), err)
		}
	}
	return err
}

func (p *RecordDecisionTaskStartedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordDecisionTaskStartedResponse(%+v)", *p)
}
