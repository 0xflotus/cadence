// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package matching

import (
	"bytes"
	"code.uber.internal/devexp/minions/.gen/go/shared"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = shared.GoUnusedProtection__
var GoUnusedProtection__ int

// Attributes:
//  - Execution
//  - TaskList
//  - ScheduleId
type AddDecisionTaskRequest struct {
	// unused fields # 1 to 9
	Execution *shared.WorkflowExecution `thrift:"execution,10" db:"execution" json:"execution,omitempty"`
	// unused fields # 11 to 19
	TaskList *shared.TaskList `thrift:"taskList,20" db:"taskList" json:"taskList,omitempty"`
	// unused fields # 21 to 29
	ScheduleId *int64 `thrift:"scheduleId,30" db:"scheduleId" json:"scheduleId,omitempty"`
}

func NewAddDecisionTaskRequest() *AddDecisionTaskRequest {
	return &AddDecisionTaskRequest{}
}

var AddDecisionTaskRequest_Execution_DEFAULT *shared.WorkflowExecution

func (p *AddDecisionTaskRequest) GetExecution() *shared.WorkflowExecution {
	if !p.IsSetExecution() {
		return AddDecisionTaskRequest_Execution_DEFAULT
	}
	return p.Execution
}

var AddDecisionTaskRequest_TaskList_DEFAULT *shared.TaskList

func (p *AddDecisionTaskRequest) GetTaskList() *shared.TaskList {
	if !p.IsSetTaskList() {
		return AddDecisionTaskRequest_TaskList_DEFAULT
	}
	return p.TaskList
}

var AddDecisionTaskRequest_ScheduleId_DEFAULT int64

func (p *AddDecisionTaskRequest) GetScheduleId() int64 {
	if !p.IsSetScheduleId() {
		return AddDecisionTaskRequest_ScheduleId_DEFAULT
	}
	return *p.ScheduleId
}
func (p *AddDecisionTaskRequest) IsSetExecution() bool {
	return p.Execution != nil
}

func (p *AddDecisionTaskRequest) IsSetTaskList() bool {
	return p.TaskList != nil
}

func (p *AddDecisionTaskRequest) IsSetScheduleId() bool {
	return p.ScheduleId != nil
}

func (p *AddDecisionTaskRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddDecisionTaskRequest) ReadField10(iprot thrift.TProtocol) error {
	p.Execution = &shared.WorkflowExecution{}
	if err := p.Execution.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Execution), err)
	}
	return nil
}

func (p *AddDecisionTaskRequest) ReadField20(iprot thrift.TProtocol) error {
	p.TaskList = &shared.TaskList{}
	if err := p.TaskList.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
	}
	return nil
}

func (p *AddDecisionTaskRequest) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ScheduleId = &v
	}
	return nil
}

func (p *AddDecisionTaskRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddDecisionTaskRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddDecisionTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecution() {
		if err := oprot.WriteFieldBegin("execution", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:execution: ", p), err)
		}
		if err := p.Execution.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Execution), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:execution: ", p), err)
		}
	}
	return err
}

func (p *AddDecisionTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskList() {
		if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:taskList: ", p), err)
		}
		if err := p.TaskList.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:taskList: ", p), err)
		}
	}
	return err
}

func (p *AddDecisionTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:scheduleId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scheduleId (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:scheduleId: ", p), err)
		}
	}
	return err
}

func (p *AddDecisionTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddDecisionTaskRequest(%+v)", *p)
}

// Attributes:
//  - Execution
//  - TaskList
//  - ScheduleId
type AddActivityTaskRequest struct {
	// unused fields # 1 to 9
	Execution *shared.WorkflowExecution `thrift:"execution,10" db:"execution" json:"execution,omitempty"`
	// unused fields # 11 to 19
	TaskList *shared.TaskList `thrift:"taskList,20" db:"taskList" json:"taskList,omitempty"`
	// unused fields # 21 to 29
	ScheduleId *int64 `thrift:"scheduleId,30" db:"scheduleId" json:"scheduleId,omitempty"`
}

func NewAddActivityTaskRequest() *AddActivityTaskRequest {
	return &AddActivityTaskRequest{}
}

var AddActivityTaskRequest_Execution_DEFAULT *shared.WorkflowExecution

func (p *AddActivityTaskRequest) GetExecution() *shared.WorkflowExecution {
	if !p.IsSetExecution() {
		return AddActivityTaskRequest_Execution_DEFAULT
	}
	return p.Execution
}

var AddActivityTaskRequest_TaskList_DEFAULT *shared.TaskList

func (p *AddActivityTaskRequest) GetTaskList() *shared.TaskList {
	if !p.IsSetTaskList() {
		return AddActivityTaskRequest_TaskList_DEFAULT
	}
	return p.TaskList
}

var AddActivityTaskRequest_ScheduleId_DEFAULT int64

func (p *AddActivityTaskRequest) GetScheduleId() int64 {
	if !p.IsSetScheduleId() {
		return AddActivityTaskRequest_ScheduleId_DEFAULT
	}
	return *p.ScheduleId
}
func (p *AddActivityTaskRequest) IsSetExecution() bool {
	return p.Execution != nil
}

func (p *AddActivityTaskRequest) IsSetTaskList() bool {
	return p.TaskList != nil
}

func (p *AddActivityTaskRequest) IsSetScheduleId() bool {
	return p.ScheduleId != nil
}

func (p *AddActivityTaskRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 20:
			if err := p.ReadField20(iprot); err != nil {
				return err
			}
		case 30:
			if err := p.ReadField30(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AddActivityTaskRequest) ReadField10(iprot thrift.TProtocol) error {
	p.Execution = &shared.WorkflowExecution{}
	if err := p.Execution.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Execution), err)
	}
	return nil
}

func (p *AddActivityTaskRequest) ReadField20(iprot thrift.TProtocol) error {
	p.TaskList = &shared.TaskList{}
	if err := p.TaskList.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskList), err)
	}
	return nil
}

func (p *AddActivityTaskRequest) ReadField30(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 30: ", err)
	} else {
		p.ScheduleId = &v
	}
	return nil
}

func (p *AddActivityTaskRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddActivityTaskRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField20(oprot); err != nil {
		return err
	}
	if err := p.writeField30(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AddActivityTaskRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExecution() {
		if err := oprot.WriteFieldBegin("execution", thrift.STRUCT, 10); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:execution: ", p), err)
		}
		if err := p.Execution.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Execution), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 10:execution: ", p), err)
		}
	}
	return err
}

func (p *AddActivityTaskRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTaskList() {
		if err := oprot.WriteFieldBegin("taskList", thrift.STRUCT, 20); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:taskList: ", p), err)
		}
		if err := p.TaskList.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskList), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 20:taskList: ", p), err)
		}
	}
	return err
}

func (p *AddActivityTaskRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetScheduleId() {
		if err := oprot.WriteFieldBegin("scheduleId", thrift.I64, 30); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:scheduleId: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.ScheduleId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.scheduleId (30) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 30:scheduleId: ", p), err)
		}
	}
	return err
}

func (p *AddActivityTaskRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddActivityTaskRequest(%+v)", *p)
}
