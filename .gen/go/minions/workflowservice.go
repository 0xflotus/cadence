// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package minions

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type WorkflowService interface { //WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
	//StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
	//to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
	//DecisionTask, application is expected to process the history of events for that session and respond back with next
	//decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
	//with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
	//

	// StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
	// 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
	// first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
	// exists with same workflowId.
	//
	//
	// Parameters:
	//  - StartRequest
	StartWorkflowExecution(startRequest *StartWorkflowExecutionRequest) (r *StartWorkflowExecutionResponse, err error)
	// PollForDecisionTask is called by application worker to process DecisionTask from a specific taskList.  A
	// DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
	// Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
	// It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
	// application worker.
	//
	//
	// Parameters:
	//  - PollRequest
	PollForDecisionTask(pollRequest *PollForDecisionTaskRequest) (r *PollForDecisionTaskResponse, err error)
	// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
	// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
	// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
	// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
	// for completing the DecisionTask.
	//
	//
	// Parameters:
	//  - CompleteRequest
	RespondDecisionTaskCompleted(completeRequest *RespondDecisionTaskCompletedRequest) (err error)
	// PollForActivityTask is called by application worker to process ActivityTask from a specific taskList.  ActivityTask
	// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
	// Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
	// processing the task.
	// Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
	// prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
	// history before the ActivityTask is dispatched to application worker.
	//
	//
	// Parameters:
	//  - PollRequest
	PollForActivityTask(pollRequest *PollForActivityTaskRequest) (r *PollForActivityTaskResponse, err error)
	// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
	// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
	// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
	// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for heartbeating.
	//
	//
	// Parameters:
	//  - HeartbeatRequest
	RecordActivityTaskHeartbeat(heartbeatRequest *RecordActivityTaskHeartbeatRequest) (r *RecordActivityTaskHeartbeatResponse, err error)
	// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
	// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	//
	//
	// Parameters:
	//  - CompleteRequest
	RespondActivityTaskCompleted(completeRequest *RespondActivityTaskCompletedRequest) (err error)
	// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
	// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
	// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
	// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
	// anymore due to activity timeout.
	//
	//
	// Parameters:
	//  - FailRequest
	RespondActivityTaskFailed(failRequest *RespondActivityTaskFailedRequest) (err error)
}

//WorkflowService API is exposed to provide support for long running applications.  Application is expected to call
//StartWorkflowExecution to create an instance for each instance of long running workflow.  Such applications are expected
//to have a worker which regularly polls for DecisionTask and ActivityTask from the WorkflowService.  For each
//DecisionTask, application is expected to process the history of events for that session and respond back with next
//decisions.  For each ActivityTask, application is expected to execute the actual logic for that task and respond back
//with completion or failure.  Worker is expected to regularly heartbeat while activity task is running.
//
type WorkflowServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewWorkflowServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *WorkflowServiceClient {
	return &WorkflowServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewWorkflowServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *WorkflowServiceClient {
	return &WorkflowServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// StartWorkflowExecution starts a new long running workflow instance.  It will create the instance with
// 'WorkflowExecutionStarted' event in history and also schedule the first DecisionTask for the worker to make the
// first decision for this instance.  It will return 'WorkflowExecutionAlreadyStartedError', if an instance already
// exists with same workflowId.
//
//
// Parameters:
//  - StartRequest
func (p *WorkflowServiceClient) StartWorkflowExecution(startRequest *StartWorkflowExecutionRequest) (r *StartWorkflowExecutionResponse, err error) {
	if err = p.sendStartWorkflowExecution(startRequest); err != nil {
		return
	}
	return p.recvStartWorkflowExecution()
}

func (p *WorkflowServiceClient) sendStartWorkflowExecution(startRequest *StartWorkflowExecutionRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServiceStartWorkflowExecutionArgs{
		StartRequest: startRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvStartWorkflowExecution() (value *StartWorkflowExecutionResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "StartWorkflowExecution" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "StartWorkflowExecution failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "StartWorkflowExecution failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "StartWorkflowExecution failed: invalid message type")
		return
	}
	result := WorkflowServiceStartWorkflowExecutionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.SessionAlreadyExistError != nil {
		err = result.SessionAlreadyExistError
		return
	}
	value = result.GetSuccess()
	return
}

// PollForDecisionTask is called by application worker to process DecisionTask from a specific taskList.  A
// DecisionTask is dispatched to callers for active workflow executions, with pending decisions.
// Application is then expected to call 'RespondDecisionTaskCompleted' API when it is done processing the DecisionTask.
// It will also create a 'DecisionTaskStarted' event in the history for that session before handing off DecisionTask to
// application worker.
//
//
// Parameters:
//  - PollRequest
func (p *WorkflowServiceClient) PollForDecisionTask(pollRequest *PollForDecisionTaskRequest) (r *PollForDecisionTaskResponse, err error) {
	if err = p.sendPollForDecisionTask(pollRequest); err != nil {
		return
	}
	return p.recvPollForDecisionTask()
}

func (p *WorkflowServiceClient) sendPollForDecisionTask(pollRequest *PollForDecisionTaskRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("PollForDecisionTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServicePollForDecisionTaskArgs{
		PollRequest: pollRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvPollForDecisionTask() (value *PollForDecisionTaskResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "PollForDecisionTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PollForDecisionTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PollForDecisionTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PollForDecisionTask failed: invalid message type")
		return
	}
	result := WorkflowServicePollForDecisionTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// RespondDecisionTaskCompleted is called by application worker to complete a DecisionTask handed as a result of
// 'PollForDecisionTask' API call.  Completing a DecisionTask will result in new events for the workflow execution and
// potentially new ActivityTask being created for corresponding decisions.  It will also create a DecisionTaskCompleted
// event in the history for that session.  Use the 'taskToken' provided as response of PollForDecisionTask API call
// for completing the DecisionTask.
//
//
// Parameters:
//  - CompleteRequest
func (p *WorkflowServiceClient) RespondDecisionTaskCompleted(completeRequest *RespondDecisionTaskCompletedRequest) (err error) {
	if err = p.sendRespondDecisionTaskCompleted(completeRequest); err != nil {
		return
	}
	return p.recvRespondDecisionTaskCompleted()
}

func (p *WorkflowServiceClient) sendRespondDecisionTaskCompleted(completeRequest *RespondDecisionTaskCompletedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServiceRespondDecisionTaskCompletedArgs{
		CompleteRequest: completeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvRespondDecisionTaskCompleted() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RespondDecisionTaskCompleted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondDecisionTaskCompleted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondDecisionTaskCompleted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondDecisionTaskCompleted failed: invalid message type")
		return
	}
	result := WorkflowServiceRespondDecisionTaskCompletedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	return
}

// PollForActivityTask is called by application worker to process ActivityTask from a specific taskList.  ActivityTask
// is dispatched to callers whenever a ScheduleTask decision is made for a workflow execution.
// Application is expected to call 'RespondActivityTaskCompleted' or 'RespondActivityTaskFailed' once it is done
// processing the task.
// Application also needs to call 'RecordActivityTaskHeartbeat' API within 'heartbeatTimeoutSeconds' interval to
// prevent the task from getting timed out.  An event 'ActivityTaskStarted' event is also written to workflow execution
// history before the ActivityTask is dispatched to application worker.
//
//
// Parameters:
//  - PollRequest
func (p *WorkflowServiceClient) PollForActivityTask(pollRequest *PollForActivityTaskRequest) (r *PollForActivityTaskResponse, err error) {
	if err = p.sendPollForActivityTask(pollRequest); err != nil {
		return
	}
	return p.recvPollForActivityTask()
}

func (p *WorkflowServiceClient) sendPollForActivityTask(pollRequest *PollForActivityTaskRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("PollForActivityTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServicePollForActivityTaskArgs{
		PollRequest: pollRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvPollForActivityTask() (value *PollForActivityTaskResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "PollForActivityTask" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "PollForActivityTask failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "PollForActivityTask failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "PollForActivityTask failed: invalid message type")
		return
	}
	result := WorkflowServicePollForActivityTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	}
	value = result.GetSuccess()
	return
}

// RecordActivityTaskHeartbeat is called by application worker while it is processing an ActivityTask.  If worker fails
// to heartbeat within 'heartbeatTimeoutSeconds' interval for the ActivityTask, then it will be marked as timedout and
// 'ActivityTaskTimedOut' event will be written to the workflow history.  Calling 'RecordActivityTaskHeartbeat' will
// fail with 'EntityNotExistsError' in such situations.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for heartbeating.
//
//
// Parameters:
//  - HeartbeatRequest
func (p *WorkflowServiceClient) RecordActivityTaskHeartbeat(heartbeatRequest *RecordActivityTaskHeartbeatRequest) (r *RecordActivityTaskHeartbeatResponse, err error) {
	if err = p.sendRecordActivityTaskHeartbeat(heartbeatRequest); err != nil {
		return
	}
	return p.recvRecordActivityTaskHeartbeat()
}

func (p *WorkflowServiceClient) sendRecordActivityTaskHeartbeat(heartbeatRequest *RecordActivityTaskHeartbeatRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServiceRecordActivityTaskHeartbeatArgs{
		HeartbeatRequest: heartbeatRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvRecordActivityTaskHeartbeat() (value *RecordActivityTaskHeartbeatResponse, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RecordActivityTaskHeartbeat" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RecordActivityTaskHeartbeat failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RecordActivityTaskHeartbeat failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RecordActivityTaskHeartbeat failed: invalid message type")
		return
	}
	result := WorkflowServiceRecordActivityTaskHeartbeatResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	value = result.GetSuccess()
	return
}

// RespondActivityTaskCompleted is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskCompleted' event being written to the workflow history and a new DecisionTask
// created for the workflow so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
//
//
// Parameters:
//  - CompleteRequest
func (p *WorkflowServiceClient) RespondActivityTaskCompleted(completeRequest *RespondActivityTaskCompletedRequest) (err error) {
	if err = p.sendRespondActivityTaskCompleted(completeRequest); err != nil {
		return
	}
	return p.recvRespondActivityTaskCompleted()
}

func (p *WorkflowServiceClient) sendRespondActivityTaskCompleted(completeRequest *RespondActivityTaskCompletedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServiceRespondActivityTaskCompletedArgs{
		CompleteRequest: completeRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvRespondActivityTaskCompleted() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RespondActivityTaskCompleted" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskCompleted failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskCompleted failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error12 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error13 error
		error13, err = error12.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error13
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskCompleted failed: invalid message type")
		return
	}
	result := WorkflowServiceRespondActivityTaskCompletedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	return
}

// RespondActivityTaskFailed is called by application worker when it is done processing an ActivityTask.  It will
// result in a new 'ActivityTaskFailed' event being written to the workflow history and a new DecisionTask
// created for the workflow instance so new decisions could be made.  Use the 'taskToken' provided as response of
// PollForActivityTask API call for completion. It fails with 'EntityNotExistsError' if the taskToken is not valid
// anymore due to activity timeout.
//
//
// Parameters:
//  - FailRequest
func (p *WorkflowServiceClient) RespondActivityTaskFailed(failRequest *RespondActivityTaskFailedRequest) (err error) {
	if err = p.sendRespondActivityTaskFailed(failRequest); err != nil {
		return
	}
	return p.recvRespondActivityTaskFailed()
}

func (p *WorkflowServiceClient) sendRespondActivityTaskFailed(failRequest *RespondActivityTaskFailedRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := WorkflowServiceRespondActivityTaskFailedArgs{
		FailRequest: failRequest,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *WorkflowServiceClient) recvRespondActivityTaskFailed() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RespondActivityTaskFailed" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RespondActivityTaskFailed failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RespondActivityTaskFailed failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error14 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error15 error
		error15, err = error14.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error15
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RespondActivityTaskFailed failed: invalid message type")
		return
	}
	result := WorkflowServiceRespondActivityTaskFailedResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.BadRequestError != nil {
		err = result.BadRequestError
		return
	} else if result.InternalServiceError != nil {
		err = result.InternalServiceError
		return
	} else if result.EntityNotExistError != nil {
		err = result.EntityNotExistError
		return
	}
	return
}

type WorkflowServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      WorkflowService
}

func (p *WorkflowServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *WorkflowServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *WorkflowServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewWorkflowServiceProcessor(handler WorkflowService) *WorkflowServiceProcessor {

	self16 := &WorkflowServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self16.processorMap["StartWorkflowExecution"] = &workflowServiceProcessorStartWorkflowExecution{handler: handler}
	self16.processorMap["PollForDecisionTask"] = &workflowServiceProcessorPollForDecisionTask{handler: handler}
	self16.processorMap["RespondDecisionTaskCompleted"] = &workflowServiceProcessorRespondDecisionTaskCompleted{handler: handler}
	self16.processorMap["PollForActivityTask"] = &workflowServiceProcessorPollForActivityTask{handler: handler}
	self16.processorMap["RecordActivityTaskHeartbeat"] = &workflowServiceProcessorRecordActivityTaskHeartbeat{handler: handler}
	self16.processorMap["RespondActivityTaskCompleted"] = &workflowServiceProcessorRespondActivityTaskCompleted{handler: handler}
	self16.processorMap["RespondActivityTaskFailed"] = &workflowServiceProcessorRespondActivityTaskFailed{handler: handler}
	return self16
}

func (p *WorkflowServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x17.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x17

}

type workflowServiceProcessorStartWorkflowExecution struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorStartWorkflowExecution) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServiceStartWorkflowExecutionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServiceStartWorkflowExecutionResult{}
	var retval *StartWorkflowExecutionResponse
	var err2 error
	if retval, err2 = p.handler.StartWorkflowExecution(args.StartRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		case *WorkflowExecutionAlreadyStartedError:
			result.SessionAlreadyExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing StartWorkflowExecution: "+err2.Error())
			oprot.WriteMessageBegin("StartWorkflowExecution", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("StartWorkflowExecution", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workflowServiceProcessorPollForDecisionTask struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorPollForDecisionTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServicePollForDecisionTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PollForDecisionTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServicePollForDecisionTaskResult{}
	var retval *PollForDecisionTaskResponse
	var err2 error
	if retval, err2 = p.handler.PollForDecisionTask(args.PollRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PollForDecisionTask: "+err2.Error())
			oprot.WriteMessageBegin("PollForDecisionTask", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PollForDecisionTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workflowServiceProcessorRespondDecisionTaskCompleted struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorRespondDecisionTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServiceRespondDecisionTaskCompletedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServiceRespondDecisionTaskCompletedResult{}
	var err2 error
	if err2 = p.handler.RespondDecisionTaskCompleted(args.CompleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondDecisionTaskCompleted: "+err2.Error())
			oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("RespondDecisionTaskCompleted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workflowServiceProcessorPollForActivityTask struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorPollForActivityTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServicePollForActivityTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("PollForActivityTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServicePollForActivityTaskResult{}
	var retval *PollForActivityTaskResponse
	var err2 error
	if retval, err2 = p.handler.PollForActivityTask(args.PollRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing PollForActivityTask: "+err2.Error())
			oprot.WriteMessageBegin("PollForActivityTask", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("PollForActivityTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workflowServiceProcessorRecordActivityTaskHeartbeat struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorRecordActivityTaskHeartbeat) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServiceRecordActivityTaskHeartbeatArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServiceRecordActivityTaskHeartbeatResult{}
	var retval *RecordActivityTaskHeartbeatResponse
	var err2 error
	if retval, err2 = p.handler.RecordActivityTaskHeartbeat(args.HeartbeatRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		case *EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RecordActivityTaskHeartbeat: "+err2.Error())
			oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RecordActivityTaskHeartbeat", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workflowServiceProcessorRespondActivityTaskCompleted struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorRespondActivityTaskCompleted) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServiceRespondActivityTaskCompletedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServiceRespondActivityTaskCompletedResult{}
	var err2 error
	if err2 = p.handler.RespondActivityTaskCompleted(args.CompleteRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		case *EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskCompleted: "+err2.Error())
			oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("RespondActivityTaskCompleted", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type workflowServiceProcessorRespondActivityTaskFailed struct {
	handler WorkflowService
}

func (p *workflowServiceProcessorRespondActivityTaskFailed) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := WorkflowServiceRespondActivityTaskFailedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := WorkflowServiceRespondActivityTaskFailedResult{}
	var err2 error
	if err2 = p.handler.RespondActivityTaskFailed(args.FailRequest); err2 != nil {
		switch v := err2.(type) {
		case *BadRequestError:
			result.BadRequestError = v
		case *InternalServiceError:
			result.InternalServiceError = v
		case *EntityNotExistsError:
			result.EntityNotExistError = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RespondActivityTaskFailed: "+err2.Error())
			oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("RespondActivityTaskFailed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - StartRequest
type WorkflowServiceStartWorkflowExecutionArgs struct {
	StartRequest *StartWorkflowExecutionRequest `thrift:"startRequest,1" db:"startRequest" json:"startRequest"`
}

func NewWorkflowServiceStartWorkflowExecutionArgs() *WorkflowServiceStartWorkflowExecutionArgs {
	return &WorkflowServiceStartWorkflowExecutionArgs{}
}

var WorkflowServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT *StartWorkflowExecutionRequest

func (p *WorkflowServiceStartWorkflowExecutionArgs) GetStartRequest() *StartWorkflowExecutionRequest {
	if !p.IsSetStartRequest() {
		return WorkflowServiceStartWorkflowExecutionArgs_StartRequest_DEFAULT
	}
	return p.StartRequest
}
func (p *WorkflowServiceStartWorkflowExecutionArgs) IsSetStartRequest() bool {
	return p.StartRequest != nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.StartRequest = &StartWorkflowExecutionRequest{}
	if err := p.StartRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartRequest), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartWorkflowExecution_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startRequest: ", p), err)
	}
	if err := p.StartRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServiceStartWorkflowExecutionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceStartWorkflowExecutionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - SessionAlreadyExistError
type WorkflowServiceStartWorkflowExecutionResult struct {
	Success                  *StartWorkflowExecutionResponse       `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError          *BadRequestError                      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError     *InternalServiceError                 `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	SessionAlreadyExistError *WorkflowExecutionAlreadyStartedError `thrift:"sessionAlreadyExistError,3" db:"sessionAlreadyExistError" json:"sessionAlreadyExistError,omitempty"`
}

func NewWorkflowServiceStartWorkflowExecutionResult() *WorkflowServiceStartWorkflowExecutionResult {
	return &WorkflowServiceStartWorkflowExecutionResult{}
}

var WorkflowServiceStartWorkflowExecutionResult_Success_DEFAULT *StartWorkflowExecutionResponse

func (p *WorkflowServiceStartWorkflowExecutionResult) GetSuccess() *StartWorkflowExecutionResponse {
	if !p.IsSetSuccess() {
		return WorkflowServiceStartWorkflowExecutionResult_Success_DEFAULT
	}
	return p.Success
}

var WorkflowServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServiceStartWorkflowExecutionResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServiceStartWorkflowExecutionResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServiceStartWorkflowExecutionResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServiceStartWorkflowExecutionResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var WorkflowServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT *WorkflowExecutionAlreadyStartedError

func (p *WorkflowServiceStartWorkflowExecutionResult) GetSessionAlreadyExistError() *WorkflowExecutionAlreadyStartedError {
	if !p.IsSetSessionAlreadyExistError() {
		return WorkflowServiceStartWorkflowExecutionResult_SessionAlreadyExistError_DEFAULT
	}
	return p.SessionAlreadyExistError
}
func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) IsSetSessionAlreadyExistError() bool {
	return p.SessionAlreadyExistError != nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &StartWorkflowExecutionResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) ReadField3(iprot thrift.TProtocol) error {
	p.SessionAlreadyExistError = &WorkflowExecutionAlreadyStartedError{}
	if err := p.SessionAlreadyExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SessionAlreadyExistError), err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StartWorkflowExecution_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionAlreadyExistError() {
		if err := oprot.WriteFieldBegin("sessionAlreadyExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sessionAlreadyExistError: ", p), err)
		}
		if err := p.SessionAlreadyExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SessionAlreadyExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sessionAlreadyExistError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceStartWorkflowExecutionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceStartWorkflowExecutionResult(%+v)", *p)
}

// Attributes:
//  - PollRequest
type WorkflowServicePollForDecisionTaskArgs struct {
	PollRequest *PollForDecisionTaskRequest `thrift:"pollRequest,1" db:"pollRequest" json:"pollRequest"`
}

func NewWorkflowServicePollForDecisionTaskArgs() *WorkflowServicePollForDecisionTaskArgs {
	return &WorkflowServicePollForDecisionTaskArgs{}
}

var WorkflowServicePollForDecisionTaskArgs_PollRequest_DEFAULT *PollForDecisionTaskRequest

func (p *WorkflowServicePollForDecisionTaskArgs) GetPollRequest() *PollForDecisionTaskRequest {
	if !p.IsSetPollRequest() {
		return WorkflowServicePollForDecisionTaskArgs_PollRequest_DEFAULT
	}
	return p.PollRequest
}
func (p *WorkflowServicePollForDecisionTaskArgs) IsSetPollRequest() bool {
	return p.PollRequest != nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	p.PollRequest = &PollForDecisionTaskRequest{}
	if err := p.PollRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PollForDecisionTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pollRequest: ", p), err)
	}
	if err := p.PollRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pollRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServicePollForDecisionTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServicePollForDecisionTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
type WorkflowServicePollForDecisionTaskResult struct {
	Success              *PollForDecisionTaskResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError      *BadRequestError             `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *InternalServiceError        `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewWorkflowServicePollForDecisionTaskResult() *WorkflowServicePollForDecisionTaskResult {
	return &WorkflowServicePollForDecisionTaskResult{}
}

var WorkflowServicePollForDecisionTaskResult_Success_DEFAULT *PollForDecisionTaskResponse

func (p *WorkflowServicePollForDecisionTaskResult) GetSuccess() *PollForDecisionTaskResponse {
	if !p.IsSetSuccess() {
		return WorkflowServicePollForDecisionTaskResult_Success_DEFAULT
	}
	return p.Success
}

var WorkflowServicePollForDecisionTaskResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServicePollForDecisionTaskResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServicePollForDecisionTaskResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServicePollForDecisionTaskResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServicePollForDecisionTaskResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServicePollForDecisionTaskResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *WorkflowServicePollForDecisionTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkflowServicePollForDecisionTaskResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServicePollForDecisionTaskResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServicePollForDecisionTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PollForDecisionTaskResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PollForDecisionTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServicePollForDecisionTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServicePollForDecisionTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServicePollForDecisionTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServicePollForDecisionTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServicePollForDecisionTaskResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type WorkflowServiceRespondDecisionTaskCompletedArgs struct {
	CompleteRequest *RespondDecisionTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewWorkflowServiceRespondDecisionTaskCompletedArgs() *WorkflowServiceRespondDecisionTaskCompletedArgs {
	return &WorkflowServiceRespondDecisionTaskCompletedArgs{}
}

var WorkflowServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT *RespondDecisionTaskCompletedRequest

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) GetCompleteRequest() *RespondDecisionTaskCompletedRequest {
	if !p.IsSetCompleteRequest() {
		return WorkflowServiceRespondDecisionTaskCompletedArgs_CompleteRequest_DEFAULT
	}
	return p.CompleteRequest
}
func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) IsSetCompleteRequest() bool {
	return p.CompleteRequest != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.CompleteRequest = &RespondDecisionTaskCompletedRequest{}
	if err := p.CompleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err)
	}
	if err := p.CompleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRespondDecisionTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
type WorkflowServiceRespondDecisionTaskCompletedResult struct {
	BadRequestError      *BadRequestError      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewWorkflowServiceRespondDecisionTaskCompletedResult() *WorkflowServiceRespondDecisionTaskCompletedResult {
	return &WorkflowServiceRespondDecisionTaskCompletedResult{}
}

var WorkflowServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServiceRespondDecisionTaskCompletedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServiceRespondDecisionTaskCompletedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *WorkflowServiceRespondDecisionTaskCompletedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondDecisionTaskCompleted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondDecisionTaskCompletedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRespondDecisionTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - PollRequest
type WorkflowServicePollForActivityTaskArgs struct {
	PollRequest *PollForActivityTaskRequest `thrift:"pollRequest,1" db:"pollRequest" json:"pollRequest"`
}

func NewWorkflowServicePollForActivityTaskArgs() *WorkflowServicePollForActivityTaskArgs {
	return &WorkflowServicePollForActivityTaskArgs{}
}

var WorkflowServicePollForActivityTaskArgs_PollRequest_DEFAULT *PollForActivityTaskRequest

func (p *WorkflowServicePollForActivityTaskArgs) GetPollRequest() *PollForActivityTaskRequest {
	if !p.IsSetPollRequest() {
		return WorkflowServicePollForActivityTaskArgs_PollRequest_DEFAULT
	}
	return p.PollRequest
}
func (p *WorkflowServicePollForActivityTaskArgs) IsSetPollRequest() bool {
	return p.PollRequest != nil
}

func (p *WorkflowServicePollForActivityTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	p.PollRequest = &PollForActivityTaskRequest{}
	if err := p.PollRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PollRequest), err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PollForActivityTask_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pollRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:pollRequest: ", p), err)
	}
	if err := p.PollRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PollRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:pollRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServicePollForActivityTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServicePollForActivityTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
type WorkflowServicePollForActivityTaskResult struct {
	Success              *PollForActivityTaskResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError      *BadRequestError             `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *InternalServiceError        `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
}

func NewWorkflowServicePollForActivityTaskResult() *WorkflowServicePollForActivityTaskResult {
	return &WorkflowServicePollForActivityTaskResult{}
}

var WorkflowServicePollForActivityTaskResult_Success_DEFAULT *PollForActivityTaskResponse

func (p *WorkflowServicePollForActivityTaskResult) GetSuccess() *PollForActivityTaskResponse {
	if !p.IsSetSuccess() {
		return WorkflowServicePollForActivityTaskResult_Success_DEFAULT
	}
	return p.Success
}

var WorkflowServicePollForActivityTaskResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServicePollForActivityTaskResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServicePollForActivityTaskResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServicePollForActivityTaskResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServicePollForActivityTaskResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServicePollForActivityTaskResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}
func (p *WorkflowServicePollForActivityTaskResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkflowServicePollForActivityTaskResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServicePollForActivityTaskResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServicePollForActivityTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &PollForActivityTaskResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PollForActivityTask_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServicePollForActivityTaskResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServicePollForActivityTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServicePollForActivityTaskResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServicePollForActivityTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServicePollForActivityTaskResult(%+v)", *p)
}

// Attributes:
//  - HeartbeatRequest
type WorkflowServiceRecordActivityTaskHeartbeatArgs struct {
	HeartbeatRequest *RecordActivityTaskHeartbeatRequest `thrift:"heartbeatRequest,1" db:"heartbeatRequest" json:"heartbeatRequest"`
}

func NewWorkflowServiceRecordActivityTaskHeartbeatArgs() *WorkflowServiceRecordActivityTaskHeartbeatArgs {
	return &WorkflowServiceRecordActivityTaskHeartbeatArgs{}
}

var WorkflowServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT *RecordActivityTaskHeartbeatRequest

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) GetHeartbeatRequest() *RecordActivityTaskHeartbeatRequest {
	if !p.IsSetHeartbeatRequest() {
		return WorkflowServiceRecordActivityTaskHeartbeatArgs_HeartbeatRequest_DEFAULT
	}
	return p.HeartbeatRequest
}
func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) IsSetHeartbeatRequest() bool {
	return p.HeartbeatRequest != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) ReadField1(iprot thrift.TProtocol) error {
	p.HeartbeatRequest = &RecordActivityTaskHeartbeatRequest{}
	if err := p.HeartbeatRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.HeartbeatRequest), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("heartbeatRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:heartbeatRequest: ", p), err)
	}
	if err := p.HeartbeatRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.HeartbeatRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:heartbeatRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRecordActivityTaskHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRecordActivityTaskHeartbeatResult struct {
	Success              *RecordActivityTaskHeartbeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
	BadRequestError      *BadRequestError                     `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *InternalServiceError                `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *EntityNotExistsError                `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRecordActivityTaskHeartbeatResult() *WorkflowServiceRecordActivityTaskHeartbeatResult {
	return &WorkflowServiceRecordActivityTaskHeartbeatResult{}
}

var WorkflowServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT *RecordActivityTaskHeartbeatResponse

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetSuccess() *RecordActivityTaskHeartbeatResponse {
	if !p.IsSetSuccess() {
		return WorkflowServiceRecordActivityTaskHeartbeatResult_Success_DEFAULT
	}
	return p.Success
}

var WorkflowServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServiceRecordActivityTaskHeartbeatResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServiceRecordActivityTaskHeartbeatResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var WorkflowServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT *EntityNotExistsError

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) GetEntityNotExistError() *EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return WorkflowServiceRecordActivityTaskHeartbeatResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &RecordActivityTaskHeartbeatResponse{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordActivityTaskHeartbeat_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRecordActivityTaskHeartbeatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRecordActivityTaskHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - CompleteRequest
type WorkflowServiceRespondActivityTaskCompletedArgs struct {
	CompleteRequest *RespondActivityTaskCompletedRequest `thrift:"completeRequest,1" db:"completeRequest" json:"completeRequest"`
}

func NewWorkflowServiceRespondActivityTaskCompletedArgs() *WorkflowServiceRespondActivityTaskCompletedArgs {
	return &WorkflowServiceRespondActivityTaskCompletedArgs{}
}

var WorkflowServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT *RespondActivityTaskCompletedRequest

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) GetCompleteRequest() *RespondActivityTaskCompletedRequest {
	if !p.IsSetCompleteRequest() {
		return WorkflowServiceRespondActivityTaskCompletedArgs_CompleteRequest_DEFAULT
	}
	return p.CompleteRequest
}
func (p *WorkflowServiceRespondActivityTaskCompletedArgs) IsSetCompleteRequest() bool {
	return p.CompleteRequest != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.CompleteRequest = &RespondActivityTaskCompletedRequest{}
	if err := p.CompleteRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompleteRequest), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("completeRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:completeRequest: ", p), err)
	}
	if err := p.CompleteRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompleteRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:completeRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRespondActivityTaskCompletedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRespondActivityTaskCompletedResult struct {
	BadRequestError      *BadRequestError      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRespondActivityTaskCompletedResult() *WorkflowServiceRespondActivityTaskCompletedResult {
	return &WorkflowServiceRespondActivityTaskCompletedResult{}
}

var WorkflowServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServiceRespondActivityTaskCompletedResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServiceRespondActivityTaskCompletedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServiceRespondActivityTaskCompletedResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServiceRespondActivityTaskCompletedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var WorkflowServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT *EntityNotExistsError

func (p *WorkflowServiceRespondActivityTaskCompletedResult) GetEntityNotExistError() *EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return WorkflowServiceRespondActivityTaskCompletedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *WorkflowServiceRespondActivityTaskCompletedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskCompleted_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskCompletedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRespondActivityTaskCompletedResult(%+v)", *p)
}

// Attributes:
//  - FailRequest
type WorkflowServiceRespondActivityTaskFailedArgs struct {
	FailRequest *RespondActivityTaskFailedRequest `thrift:"failRequest,1" db:"failRequest" json:"failRequest"`
}

func NewWorkflowServiceRespondActivityTaskFailedArgs() *WorkflowServiceRespondActivityTaskFailedArgs {
	return &WorkflowServiceRespondActivityTaskFailedArgs{}
}

var WorkflowServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT *RespondActivityTaskFailedRequest

func (p *WorkflowServiceRespondActivityTaskFailedArgs) GetFailRequest() *RespondActivityTaskFailedRequest {
	if !p.IsSetFailRequest() {
		return WorkflowServiceRespondActivityTaskFailedArgs_FailRequest_DEFAULT
	}
	return p.FailRequest
}
func (p *WorkflowServiceRespondActivityTaskFailedArgs) IsSetFailRequest() bool {
	return p.FailRequest != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.FailRequest = &RespondActivityTaskFailedRequest{}
	if err := p.FailRequest.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailRequest), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskFailed_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failRequest", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:failRequest: ", p), err)
	}
	if err := p.FailRequest.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailRequest), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:failRequest: ", p), err)
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskFailedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRespondActivityTaskFailedArgs(%+v)", *p)
}

// Attributes:
//  - BadRequestError
//  - InternalServiceError
//  - EntityNotExistError
type WorkflowServiceRespondActivityTaskFailedResult struct {
	BadRequestError      *BadRequestError      `thrift:"badRequestError,1" db:"badRequestError" json:"badRequestError,omitempty"`
	InternalServiceError *InternalServiceError `thrift:"internalServiceError,2" db:"internalServiceError" json:"internalServiceError,omitempty"`
	EntityNotExistError  *EntityNotExistsError `thrift:"entityNotExistError,3" db:"entityNotExistError" json:"entityNotExistError,omitempty"`
}

func NewWorkflowServiceRespondActivityTaskFailedResult() *WorkflowServiceRespondActivityTaskFailedResult {
	return &WorkflowServiceRespondActivityTaskFailedResult{}
}

var WorkflowServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT *BadRequestError

func (p *WorkflowServiceRespondActivityTaskFailedResult) GetBadRequestError() *BadRequestError {
	if !p.IsSetBadRequestError() {
		return WorkflowServiceRespondActivityTaskFailedResult_BadRequestError_DEFAULT
	}
	return p.BadRequestError
}

var WorkflowServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT *InternalServiceError

func (p *WorkflowServiceRespondActivityTaskFailedResult) GetInternalServiceError() *InternalServiceError {
	if !p.IsSetInternalServiceError() {
		return WorkflowServiceRespondActivityTaskFailedResult_InternalServiceError_DEFAULT
	}
	return p.InternalServiceError
}

var WorkflowServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT *EntityNotExistsError

func (p *WorkflowServiceRespondActivityTaskFailedResult) GetEntityNotExistError() *EntityNotExistsError {
	if !p.IsSetEntityNotExistError() {
		return WorkflowServiceRespondActivityTaskFailedResult_EntityNotExistError_DEFAULT
	}
	return p.EntityNotExistError
}
func (p *WorkflowServiceRespondActivityTaskFailedResult) IsSetBadRequestError() bool {
	return p.BadRequestError != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) IsSetInternalServiceError() bool {
	return p.InternalServiceError != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) IsSetEntityNotExistError() bool {
	return p.EntityNotExistError != nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) ReadField1(iprot thrift.TProtocol) error {
	p.BadRequestError = &BadRequestError{}
	if err := p.BadRequestError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BadRequestError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) ReadField2(iprot thrift.TProtocol) error {
	p.InternalServiceError = &InternalServiceError{}
	if err := p.InternalServiceError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InternalServiceError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) ReadField3(iprot thrift.TProtocol) error {
	p.EntityNotExistError = &EntityNotExistsError{}
	if err := p.EntityNotExistError.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EntityNotExistError), err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RespondActivityTaskFailed_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBadRequestError() {
		if err := oprot.WriteFieldBegin("badRequestError", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:badRequestError: ", p), err)
		}
		if err := p.BadRequestError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BadRequestError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:badRequestError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInternalServiceError() {
		if err := oprot.WriteFieldBegin("internalServiceError", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:internalServiceError: ", p), err)
		}
		if err := p.InternalServiceError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InternalServiceError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:internalServiceError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityNotExistError() {
		if err := oprot.WriteFieldBegin("entityNotExistError", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entityNotExistError: ", p), err)
		}
		if err := p.EntityNotExistError.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EntityNotExistError), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entityNotExistError: ", p), err)
		}
	}
	return err
}

func (p *WorkflowServiceRespondActivityTaskFailedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkflowServiceRespondActivityTaskFailedResult(%+v)", *p)
}
