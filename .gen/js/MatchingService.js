//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');


var ttypes = require('./matching_types');
//HELPER FUNCTIONS AND STRUCTURES

var MatchingService_PollForDecisionTask_args = function(args) {
  this.pollRequest = null;
  if (args) {
    if (args.pollRequest !== undefined && args.pollRequest !== null) {
      this.pollRequest = new shared_ttypes.PollForDecisionTaskRequest(args.pollRequest);
    }
  }
};
MatchingService_PollForDecisionTask_args.prototype = {};
MatchingService_PollForDecisionTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pollRequest = new shared_ttypes.PollForDecisionTaskRequest();
        this.pollRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_PollForDecisionTask_args.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_PollForDecisionTask_args');
  if (this.pollRequest !== null && this.pollRequest !== undefined) {
    output.writeFieldBegin('pollRequest', Thrift.Type.STRUCT, 1);
    this.pollRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_PollForDecisionTask_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.PollForDecisionTaskResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
  }
};
MatchingService_PollForDecisionTask_result.prototype = {};
MatchingService_PollForDecisionTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.PollForDecisionTaskResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_PollForDecisionTask_result.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_PollForDecisionTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_PollForActivityTask_args = function(args) {
  this.pollRequest = null;
  if (args) {
    if (args.pollRequest !== undefined && args.pollRequest !== null) {
      this.pollRequest = new shared_ttypes.PollForActivityTaskRequest(args.pollRequest);
    }
  }
};
MatchingService_PollForActivityTask_args.prototype = {};
MatchingService_PollForActivityTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pollRequest = new shared_ttypes.PollForActivityTaskRequest();
        this.pollRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_PollForActivityTask_args.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_PollForActivityTask_args');
  if (this.pollRequest !== null && this.pollRequest !== undefined) {
    output.writeFieldBegin('pollRequest', Thrift.Type.STRUCT, 1);
    this.pollRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_PollForActivityTask_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.PollForActivityTaskResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
  }
};
MatchingService_PollForActivityTask_result.prototype = {};
MatchingService_PollForActivityTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.PollForActivityTaskResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_PollForActivityTask_result.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_PollForActivityTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_AddDecisionTask_args = function(args) {
  this.addRequest = null;
  if (args) {
    if (args.addRequest !== undefined && args.addRequest !== null) {
      this.addRequest = new ttypes.AddDecisionTaskRequest(args.addRequest);
    }
  }
};
MatchingService_AddDecisionTask_args.prototype = {};
MatchingService_AddDecisionTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.addRequest = new ttypes.AddDecisionTaskRequest();
        this.addRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_AddDecisionTask_args.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_AddDecisionTask_args');
  if (this.addRequest !== null && this.addRequest !== undefined) {
    output.writeFieldBegin('addRequest', Thrift.Type.STRUCT, 1);
    this.addRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_AddDecisionTask_result = function(args) {
  this.badRequestError = null;
  this.internalServiceError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args) {
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
  }
};
MatchingService_AddDecisionTask_result.prototype = {};
MatchingService_AddDecisionTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_AddDecisionTask_result.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_AddDecisionTask_result');
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_AddActivityTask_args = function(args) {
  this.addRequest = null;
  if (args) {
    if (args.addRequest !== undefined && args.addRequest !== null) {
      this.addRequest = new ttypes.AddActivityTaskRequest(args.addRequest);
    }
  }
};
MatchingService_AddActivityTask_args.prototype = {};
MatchingService_AddActivityTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.addRequest = new ttypes.AddActivityTaskRequest();
        this.addRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_AddActivityTask_args.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_AddActivityTask_args');
  if (this.addRequest !== null && this.addRequest !== undefined) {
    output.writeFieldBegin('addRequest', Thrift.Type.STRUCT, 1);
    this.addRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingService_AddActivityTask_result = function(args) {
  this.badRequestError = null;
  this.internalServiceError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args) {
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
  }
};
MatchingService_AddActivityTask_result.prototype = {};
MatchingService_AddActivityTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MatchingService_AddActivityTask_result.prototype.write = function(output) {
  output.writeStructBegin('MatchingService_AddActivityTask_result');
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MatchingServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
MatchingServiceClient.prototype = {};
MatchingServiceClient.prototype.seqid = function() { return this._seqid; }
MatchingServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
MatchingServiceClient.prototype.PollForDecisionTask = function(pollRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PollForDecisionTask(pollRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PollForDecisionTask(pollRequest);
  }
};

MatchingServiceClient.prototype.send_PollForDecisionTask = function(pollRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PollForDecisionTask', Thrift.MessageType.CALL, this.seqid());
  var args = new MatchingService_PollForDecisionTask_args();
  args.pollRequest = pollRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MatchingServiceClient.prototype.recv_PollForDecisionTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MatchingService_PollForDecisionTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PollForDecisionTask failed: unknown result');
};
MatchingServiceClient.prototype.PollForActivityTask = function(pollRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PollForActivityTask(pollRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PollForActivityTask(pollRequest);
  }
};

MatchingServiceClient.prototype.send_PollForActivityTask = function(pollRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PollForActivityTask', Thrift.MessageType.CALL, this.seqid());
  var args = new MatchingService_PollForActivityTask_args();
  args.pollRequest = pollRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MatchingServiceClient.prototype.recv_PollForActivityTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MatchingService_PollForActivityTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PollForActivityTask failed: unknown result');
};
MatchingServiceClient.prototype.AddDecisionTask = function(addRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddDecisionTask(addRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddDecisionTask(addRequest);
  }
};

MatchingServiceClient.prototype.send_AddDecisionTask = function(addRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AddDecisionTask', Thrift.MessageType.CALL, this.seqid());
  var args = new MatchingService_AddDecisionTask_args();
  args.addRequest = addRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MatchingServiceClient.prototype.recv_AddDecisionTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MatchingService_AddDecisionTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  callback(null)
};
MatchingServiceClient.prototype.AddActivityTask = function(addRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_AddActivityTask(addRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_AddActivityTask(addRequest);
  }
};

MatchingServiceClient.prototype.send_AddActivityTask = function(addRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('AddActivityTask', Thrift.MessageType.CALL, this.seqid());
  var args = new MatchingService_AddActivityTask_args();
  args.addRequest = addRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

MatchingServiceClient.prototype.recv_AddActivityTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new MatchingService_AddActivityTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  callback(null)
};
var MatchingServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
MatchingServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

MatchingServiceProcessor.prototype.process_PollForDecisionTask = function(seqid, input, output) {
  var args = new MatchingService_PollForDecisionTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PollForDecisionTask.length === 1) {
    Q.fcall(this._handler.PollForDecisionTask, args.pollRequest)
      .then(function(result) {
        var result = new MatchingService_PollForDecisionTask_result({success: result});
        output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
          var result = new MatchingService_PollForDecisionTask_result(err);
          output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.PollForDecisionTask(args.pollRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
        var result = new MatchingService_PollForDecisionTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MatchingServiceProcessor.prototype.process_PollForActivityTask = function(seqid, input, output) {
  var args = new MatchingService_PollForActivityTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PollForActivityTask.length === 1) {
    Q.fcall(this._handler.PollForActivityTask, args.pollRequest)
      .then(function(result) {
        var result = new MatchingService_PollForActivityTask_result({success: result});
        output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
          var result = new MatchingService_PollForActivityTask_result(err);
          output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.PollForActivityTask(args.pollRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
        var result = new MatchingService_PollForActivityTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MatchingServiceProcessor.prototype.process_AddDecisionTask = function(seqid, input, output) {
  var args = new MatchingService_AddDecisionTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddDecisionTask.length === 1) {
    Q.fcall(this._handler.AddDecisionTask, args.addRequest)
      .then(function(result) {
        var result = new MatchingService_AddDecisionTask_result({success: result});
        output.writeMessageBegin("AddDecisionTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
          var result = new MatchingService_AddDecisionTask_result(err);
          output.writeMessageBegin("AddDecisionTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("AddDecisionTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.AddDecisionTask(args.addRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
        var result = new MatchingService_AddDecisionTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("AddDecisionTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddDecisionTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

MatchingServiceProcessor.prototype.process_AddActivityTask = function(seqid, input, output) {
  var args = new MatchingService_AddActivityTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.AddActivityTask.length === 1) {
    Q.fcall(this._handler.AddActivityTask, args.addRequest)
      .then(function(result) {
        var result = new MatchingService_AddActivityTask_result({success: result});
        output.writeMessageBegin("AddActivityTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
          var result = new MatchingService_AddActivityTask_result(err);
          output.writeMessageBegin("AddActivityTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("AddActivityTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.AddActivityTask(args.addRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
        var result = new MatchingService_AddActivityTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("AddActivityTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("AddActivityTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

