//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');


var ttypes = module.exports = {};
var AddDecisionTaskRequest = module.exports.AddDecisionTaskRequest = function(args) {
  this.execution = null;
  this.taskList = null;
  this.scheduleId = null;
  if (args) {
    if (args.execution !== undefined && args.execution !== null) {
      this.execution = new shared_ttypes.WorkflowExecution(args.execution);
    }
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new shared_ttypes.TaskList(args.taskList);
    }
    if (args.scheduleId !== undefined && args.scheduleId !== null) {
      this.scheduleId = args.scheduleId;
    }
  }
};
AddDecisionTaskRequest.prototype = {};
AddDecisionTaskRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.execution = new shared_ttypes.WorkflowExecution();
        this.execution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new shared_ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.scheduleId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddDecisionTaskRequest.prototype.write = function(output) {
  output.writeStructBegin('AddDecisionTaskRequest');
  if (this.execution !== null && this.execution !== undefined) {
    output.writeFieldBegin('execution', Thrift.Type.STRUCT, 10);
    this.execution.write(output);
    output.writeFieldEnd();
  }
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 20);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.scheduleId !== null && this.scheduleId !== undefined) {
    output.writeFieldBegin('scheduleId', Thrift.Type.I64, 30);
    output.writeI64(this.scheduleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AddActivityTaskRequest = module.exports.AddActivityTaskRequest = function(args) {
  this.execution = null;
  this.taskList = null;
  this.scheduleId = null;
  if (args) {
    if (args.execution !== undefined && args.execution !== null) {
      this.execution = new shared_ttypes.WorkflowExecution(args.execution);
    }
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new shared_ttypes.TaskList(args.taskList);
    }
    if (args.scheduleId !== undefined && args.scheduleId !== null) {
      this.scheduleId = args.scheduleId;
    }
  }
};
AddActivityTaskRequest.prototype = {};
AddActivityTaskRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.execution = new shared_ttypes.WorkflowExecution();
        this.execution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new shared_ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.scheduleId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AddActivityTaskRequest.prototype.write = function(output) {
  output.writeStructBegin('AddActivityTaskRequest');
  if (this.execution !== null && this.execution !== undefined) {
    output.writeFieldBegin('execution', Thrift.Type.STRUCT, 10);
    this.execution.write(output);
    output.writeFieldEnd();
  }
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 20);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.scheduleId !== null && this.scheduleId !== undefined) {
    output.writeFieldBegin('scheduleId', Thrift.Type.I64, 30);
    output.writeI64(this.scheduleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

