#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class EventAlreadyStartedError(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', unicode, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EventAlreadyStartedError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordActivityTaskStartedRequest:
  """
  Attributes:
   - workflowExecution
   - scheduleId
   - taskId
   - pollRequest
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'workflowExecution', (shared.ttypes.WorkflowExecution, shared.ttypes.WorkflowExecution.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'scheduleId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'taskId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'pollRequest', (shared.ttypes.PollForActivityTaskRequest, shared.ttypes.PollForActivityTaskRequest.thrift_spec), None, ), # 40
  )

  def __init__(self, workflowExecution=None, scheduleId=None, taskId=None, pollRequest=None,):
    self.workflowExecution = workflowExecution
    self.scheduleId = scheduleId
    self.taskId = taskId
    self.pollRequest = pollRequest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.workflowExecution = shared.ttypes.WorkflowExecution()
          self.workflowExecution.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.scheduleId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.taskId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.pollRequest = shared.ttypes.PollForActivityTaskRequest()
          self.pollRequest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordActivityTaskStartedRequest')
    if self.workflowExecution is not None:
      oprot.writeFieldBegin('workflowExecution', TType.STRUCT, 10)
      self.workflowExecution.write(oprot)
      oprot.writeFieldEnd()
    if self.scheduleId is not None:
      oprot.writeFieldBegin('scheduleId', TType.I64, 20)
      oprot.writeI64(self.scheduleId)
      oprot.writeFieldEnd()
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I64, 30)
      oprot.writeI64(self.taskId)
      oprot.writeFieldEnd()
    if self.pollRequest is not None:
      oprot.writeFieldBegin('pollRequest', TType.STRUCT, 40)
      self.pollRequest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowExecution)
    value = (value * 31) ^ hash(self.scheduleId)
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.pollRequest)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordActivityTaskStartedResponse:
  """
  Attributes:
   - startedEvent
   - scheduledEvent
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'startedEvent', (shared.ttypes.HistoryEvent, shared.ttypes.HistoryEvent.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'scheduledEvent', (shared.ttypes.HistoryEvent, shared.ttypes.HistoryEvent.thrift_spec), None, ), # 20
  )

  def __init__(self, startedEvent=None, scheduledEvent=None,):
    self.startedEvent = startedEvent
    self.scheduledEvent = scheduledEvent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.startedEvent = shared.ttypes.HistoryEvent()
          self.startedEvent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.scheduledEvent = shared.ttypes.HistoryEvent()
          self.scheduledEvent.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordActivityTaskStartedResponse')
    if self.startedEvent is not None:
      oprot.writeFieldBegin('startedEvent', TType.STRUCT, 10)
      self.startedEvent.write(oprot)
      oprot.writeFieldEnd()
    if self.scheduledEvent is not None:
      oprot.writeFieldBegin('scheduledEvent', TType.STRUCT, 20)
      self.scheduledEvent.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.startedEvent)
    value = (value * 31) ^ hash(self.scheduledEvent)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordDecisionTaskStartedRequest:
  """
  Attributes:
   - workflowExecution
   - scheduleId
   - taskId
   - pollRequest
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'workflowExecution', (shared.ttypes.WorkflowExecution, shared.ttypes.WorkflowExecution.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'scheduleId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'taskId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'pollRequest', (shared.ttypes.PollForDecisionTaskRequest, shared.ttypes.PollForDecisionTaskRequest.thrift_spec), None, ), # 40
  )

  def __init__(self, workflowExecution=None, scheduleId=None, taskId=None, pollRequest=None,):
    self.workflowExecution = workflowExecution
    self.scheduleId = scheduleId
    self.taskId = taskId
    self.pollRequest = pollRequest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.workflowExecution = shared.ttypes.WorkflowExecution()
          self.workflowExecution.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.scheduleId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.taskId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.pollRequest = shared.ttypes.PollForDecisionTaskRequest()
          self.pollRequest.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordDecisionTaskStartedRequest')
    if self.workflowExecution is not None:
      oprot.writeFieldBegin('workflowExecution', TType.STRUCT, 10)
      self.workflowExecution.write(oprot)
      oprot.writeFieldEnd()
    if self.scheduleId is not None:
      oprot.writeFieldBegin('scheduleId', TType.I64, 20)
      oprot.writeI64(self.scheduleId)
      oprot.writeFieldEnd()
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I64, 30)
      oprot.writeI64(self.taskId)
      oprot.writeFieldEnd()
    if self.pollRequest is not None:
      oprot.writeFieldBegin('pollRequest', TType.STRUCT, 40)
      self.pollRequest.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowExecution)
    value = (value * 31) ^ hash(self.scheduleId)
    value = (value * 31) ^ hash(self.taskId)
    value = (value * 31) ^ hash(self.pollRequest)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordDecisionTaskStartedResponse:
  """
  Attributes:
   - workflowType
   - previousStartedEventId
   - startedEventId
   - history
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'workflowType', (shared.ttypes.WorkflowType, shared.ttypes.WorkflowType.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'previousStartedEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'startedEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'history', (shared.ttypes.History, shared.ttypes.History.thrift_spec), None, ), # 40
  )

  def __init__(self, workflowType=None, previousStartedEventId=None, startedEventId=None, history=None,):
    self.workflowType = workflowType
    self.previousStartedEventId = previousStartedEventId
    self.startedEventId = startedEventId
    self.history = history

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.workflowType = shared.ttypes.WorkflowType()
          self.workflowType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.previousStartedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.history = shared.ttypes.History()
          self.history.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordDecisionTaskStartedResponse')
    if self.workflowType is not None:
      oprot.writeFieldBegin('workflowType', TType.STRUCT, 10)
      self.workflowType.write(oprot)
      oprot.writeFieldEnd()
    if self.previousStartedEventId is not None:
      oprot.writeFieldBegin('previousStartedEventId', TType.I64, 20)
      oprot.writeI64(self.previousStartedEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 30)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.history is not None:
      oprot.writeFieldBegin('history', TType.STRUCT, 40)
      self.history.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowType)
    value = (value * 31) ^ hash(self.previousStartedEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.history)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
