#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import shared.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class AddDecisionTaskRequest:
  """
  Attributes:
   - execution
   - taskList
   - scheduleId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'execution', (shared.ttypes.WorkflowExecution, shared.ttypes.WorkflowExecution.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'taskList', (shared.ttypes.TaskList, shared.ttypes.TaskList.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'scheduleId', None, None, ), # 30
  )

  def __init__(self, execution=None, taskList=None, scheduleId=None,):
    self.execution = execution
    self.taskList = taskList
    self.scheduleId = scheduleId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.execution = shared.ttypes.WorkflowExecution()
          self.execution.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.taskList = shared.ttypes.TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.scheduleId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddDecisionTaskRequest')
    if self.execution is not None:
      oprot.writeFieldBegin('execution', TType.STRUCT, 10)
      self.execution.write(oprot)
      oprot.writeFieldEnd()
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 20)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.scheduleId is not None:
      oprot.writeFieldBegin('scheduleId', TType.I64, 30)
      oprot.writeI64(self.scheduleId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.execution)
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.scheduleId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AddActivityTaskRequest:
  """
  Attributes:
   - execution
   - taskList
   - scheduleId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'execution', (shared.ttypes.WorkflowExecution, shared.ttypes.WorkflowExecution.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'taskList', (shared.ttypes.TaskList, shared.ttypes.TaskList.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'scheduleId', None, None, ), # 30
  )

  def __init__(self, execution=None, taskList=None, scheduleId=None,):
    self.execution = execution
    self.taskList = taskList
    self.scheduleId = scheduleId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.execution = shared.ttypes.WorkflowExecution()
          self.execution.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.taskList = shared.ttypes.TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.scheduleId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AddActivityTaskRequest')
    if self.execution is not None:
      oprot.writeFieldBegin('execution', TType.STRUCT, 10)
      self.execution.write(oprot)
      oprot.writeFieldEnd()
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 20)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.scheduleId is not None:
      oprot.writeFieldBegin('scheduleId', TType.I64, 30)
      oprot.writeI64(self.scheduleId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.execution)
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.scheduleId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
